{"meta":{"title":"Hi! This is Arianna!","subtitle":"Welcome to my blog!","description":"","author":"Wstson Arianna","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"C++运算符重载实现(加号、左移、递增、赋值、关系运算符、函数调用)","slug":"C++运算符重载实现(加号、左移、递增、赋值、关系运算符、函数调用)","date":"2020-05-08T11:32:45.023Z","updated":"2020-05-08T11:32:54.798Z","comments":true,"path":"2020/05/08/C++运算符重载实现(加号、左移、递增、赋值、关系运算符、函数调用)/","link":"","permalink":"http://yoursite.com/2020/05/08/C++%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%E5%AE%9E%E7%8E%B0(%E5%8A%A0%E5%8F%B7%E3%80%81%E5%B7%A6%E7%A7%BB%E3%80%81%E9%80%92%E5%A2%9E%E3%80%81%E8%B5%8B%E5%80%BC%E3%80%81%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8)/","excerpt":"","text":"先来复习一下C++的内存分区问题~ C++内存分区C++程序的内存分区可划分为四大内存分区：堆、栈、全局/静态存储区和代码区。 不同类型的变量存放的区域不同。 在程序被编译为exe可执行文件后，未运行之前，分为两个区域：代码区和全局区。 代码区存放程序体的二进制代码。比如我们写的函数，都是在代码区的。 123456789101112int a &#x3D; 0;&#x2F;&#x2F;静态全局变量区char *p1; &#x2F;&#x2F;编译器默认初始化为NULLvoid main()&#123; int b; &#x2F;&#x2F;栈 char s[] &#x3D; &quot;abc&quot;;&#x2F;&#x2F;栈 char *p2 &#x3D; &quot;123456&quot;;&#x2F;&#x2F;123456在字符串常量区，p2在栈上 static int c &#x3D;0; &#x2F;&#x2F;c在静态变量区，0为文字常量，在代码区 const int d&#x3D;0; &#x2F;&#x2F;栈 static const int d;&#x2F;&#x2F;静态常量区 p1 &#x3D; (char *)malloc(10);&#x2F;&#x2F;分配得来得10字节在堆区。 strcpy(p1, &quot;123456&quot;); &#x2F;&#x2F;123456放在字符串常量区，编译器可能会将它与p2所指向的&quot;123456&quot;优化成一个地方 &#125; 以上所有代码，编译成二进制后存放于代码区，文字常量存放于代码区，是不可寻址的。 全局区全局区存储全局变量，静态变量，还包括了常量区，字符串常量和其他常量（const修饰的全局变量）也存放在全局区。全局区的数据在程序结束后由操作系统释放。 程序运行之后 栈区由编译器自动释放，存放函数的参数值，局部变量等。整个程序的栈区的大小可以在编译器中由用户自行设定。 注意：不要返回局部变量地址。 堆区由编程人员手动申请，手动释放，若不手动释放，程序结束后由系统回收，生命周期是整个程序运行期间。使用new进行堆的申请，堆的总大小为机器的虚拟内存的大小。new返回的是该数据类型的指针。 1int * p &#x3D; new int(10); 使用delete进行释放。 重载方式有两种：1.重载的函数作为成员函数。2.重载的函数作为全局函数函数名是规定的：operator+ 加号运算符（“+”）重载对于内置的数据类型，编译器知道如何进行运算。两个自定义的数据类型，进行相加，就需要进行加号运算符重载。 成员函数实现加号重载： 12345678910111213141516171819202122232425class Person&#123;public: Person operator+(Person &amp;p)&#123; Person tmp; tmp.a &#x3D; this-&gt;a + p.a; tmp.b &#x3D; this-&gt;b + p.b; return tmp; &#125; int a; int b;&#125;;int main()&#123; Person A; A.a &#x3D; 10; A.b &#x3D; 20; Person B; B.a &#x3D; 1; B.b &#x3D; 3; Person C; C &#x3D; A + B; cout &lt;&lt; C.a &lt;&lt; &quot; &quot; &lt;&lt; C.b &lt;&lt; endl;&#125; 运行结果： 全局函数实现加号重载： 1234567891011121314151617181920212223242526class Person&#123;public: int a; int b;&#125;;Person operator+(Person &amp;p1,Person &amp;p2)&#123; &#x2F;&#x2F;需要传入两个参数 Person tmp; tmp.a &#x3D; p1.a + p2.a; tmp.b &#x3D; p1.b + p2.b; return tmp;&#125;int main()&#123; Person A; A.a &#x3D; 10; A.b &#x3D; 20; Person B; B.a &#x3D; 1; B.b &#x3D; 3; Person C; C &#x3D; A + B; cout &lt;&lt; C.a &lt;&lt; &quot; &quot; &lt;&lt; C.b &lt;&lt; endl;&#125; 运行结果： 运算符重载也可以发生函数重载 12345678910111213141516171819202122232425262728293031323334353637class Person&#123;public: int a; int b;&#125;;Person operator+(Person &amp;p1,Person &amp;p2)&#123; Person tmp; tmp.a &#x3D; p1.a + p2.a; tmp.b &#x3D; p1.b + p2.b; return tmp;&#125;Person operator+(Person &amp;p1,int n)&#123; &#x2F;&#x2F;函数重载 Person tmp; tmp.a &#x3D; p1.a + n; tmp.b &#x3D; p1.b + n; return tmp;&#125;int main()&#123; Person A; A.a &#x3D; 10; A.b &#x3D; 20; Person B; B.a &#x3D; 1; B.b &#x3D; 3; Person C; C &#x3D; A + B; cout &lt;&lt; C.a &lt;&lt; &quot; &quot; &lt;&lt; C.b &lt;&lt; endl; Person D; D &#x3D; A + 10; cout &lt;&lt; D.a &lt;&lt; &quot; &quot; &lt;&lt; D.b &lt;&lt; endl;&#125; 运行结果: 左移运算符（“&lt;&lt;”）符重载可以输出自定义的数据类型。 123456789101112131415161718192021class Person&#123;public: int a; int b;&#125;;ostream&amp; operator&lt;&lt;(ostream &amp;cout , Person &amp;p)&#123; cout &lt;&lt; p.a &lt;&lt; &quot; &quot; &lt;&lt; p.b &lt;&lt; endl; return cout; &#x2F;&#x2F;返回cout 可以实现链式编程&#125;int main()&#123; Person A; A.a &#x3D; 10; A.b &#x3D; 20; cout &lt;&lt; A &lt;&lt; endl;&#125; 运行结果： 左移运算符重载无法用成员函数来实现因为要实现的是cout &lt;&lt; A &lt;&lt; endl;看例子吧~ 123456789101112131415161718192021222324#include &lt;iostream&gt;using namespace std;#include &lt;string&gt;class Person&#123;public: int a; int b; ostream&amp; operator&lt;&lt;(ostream &amp;cout)&#123; cout &lt;&lt; this-&gt;a &lt;&lt; &quot; &quot; &lt;&lt; this-&gt;b &lt;&lt; endl; return cout; &#125;&#125;;int main()&#123; Person A; A.a &#x3D; 10; A.b &#x3D; 20; A &lt;&lt; cout &lt;&lt; endl; &#x2F;&#x2F;如果用成员函数，最后实现了是这样的。。。(因为是A调用，所以A写在前)&#125; 运行结果： 递增运算符（“++”）重载123456789101112131415161718192021222324252627282930313233343536373839class Person&#123;public: int a; int b; Person&amp; operator++()&#123; &#x2F;&#x2F;前置递增返回的是引用，这样++(++A)也不会出错 a++; b++; return *this; &#125; &#x2F;&#x2F;后置递增返回的是值 Person operator++(int)&#123; &#x2F;&#x2F;int是占位参数，可以用来区分前置和后置，必须写int，其他类型不可以 Person tmp &#x3D; *this; a++; b++; return tmp; &#125;&#125;;ostream&amp; operator&lt;&lt;(ostream &amp;cout , Person &amp;p)&#123; cout &lt;&lt; p.a &lt;&lt; &quot; &quot; &lt;&lt; p.b &lt;&lt; endl; return cout;&#125;int main()&#123; Person A; A.a &#x3D; 10; A.b &#x3D; 20; cout &lt;&lt; &quot;原始A的值：&quot; &lt;&lt;A &lt;&lt; endl; ++A; cout &lt;&lt; &quot;A++后的值：&quot; &lt;&lt; A &lt;&lt; endl; A++; cout &lt;&lt; &quot;A++后的值：&quot; &lt;&lt; A &lt;&lt; endl;&#125; 运行结果： 赋值运算符（“=”）重载存在复制运算符的原因是堆区的数据重复释放，也就是浅拷贝的问题。详细解释： 在对象P1中new一个age变量，这个遍历被存储在堆区，需要程序员手动申请，手动释放，把P1赋给p2时，P2也指向这个堆区的地址空间，所以当使用析构函数对堆区数据进行释放时，P1释放了一次，P2又释放了一次，出现了堆区数据重复释放的情况，程序崩溃。 解决方案：利用深拷贝来解决浅拷贝的问题。因为出现程序崩溃的主要原因是，当p2 = p1时，p2直接指向了0x0011这块地址，使用赋值运算符重载，使p2 = p1时，p2开辟一个新的地址空间用来存储年龄18这个数据，这样在释放时，就不会重复释放了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445class Person &#123;public: Person(int age) &#123; this-&gt;age &#x3D; new int(age); &#125; int *age; ~Person() &#123; if (age !&#x3D; NULL) &#123; delete age; age &#x3D; NULL; &#125; &#125; Person &amp;operator&#x3D;(Person &amp;p) &#123; &#x2F;&#x2F;返回类型是Person，可以链式赋值，p3 &#x3D; p2 &#x3D; p1 if (this-&gt;age !&#x3D; NULL) &#123; delete age; age &#x3D; NULL; &#125; age &#x3D; new int(*p.age); return *this; &#125;&#125;;int main() &#123; Person p1(10); cout &lt;&lt; *p1.age &lt;&lt; endl; &#x2F;&#x2F;p1.age是指针 Person p2(18); cout &lt;&lt; *p2.age &lt;&lt; endl; p2 &#x3D; p1; cout &lt;&lt; *p2.age &lt;&lt; endl; Person p3(20); cout &lt;&lt; *p3.age &lt;&lt; endl; p1 &#x3D; p2 &#x3D; p3; cout &lt;&lt; *p1.age &lt;&lt; &quot; &quot; &lt;&lt; *p2.age &lt;&lt; &quot; &quot; &lt;&lt; *p3.age &lt;&lt; endl;&#125; 运行结果： 关系运算符重载1234567891011121314151617181920212223242526272829303132333435public: Person(string name, int age,int sex) &#123; this-&gt;name &#x3D; name; this-&gt;age &#x3D; age; this-&gt;sex &#x3D; sex; &#125; string name; int age; int sex; bool operator&#x3D;&#x3D;(Person &amp;p)&#123; return this-&gt;name &#x3D;&#x3D; p.name &amp;&amp; this-&gt;age &#x3D;&#x3D; p.age &amp;&amp; this-&gt;sex &#x3D;&#x3D; p.sex; &#125; bool operator!&#x3D;(Person &amp;p)&#123; return !(this-&gt;name &#x3D;&#x3D; p.name &amp;&amp; this-&gt;age &#x3D;&#x3D; p.age &amp;&amp; this-&gt;sex &#x3D;&#x3D; p.sex); &#125;&#125;;int main() &#123; Person p1(&quot;Tom&quot;,23,1); Person p2(&quot;Tom&quot;,23,1); Person p3(&quot;Amy&quot;,23,2); cout &lt;&lt; (p1 &#x3D;&#x3D; p2 ? &quot;相等&quot; : &quot;不相等&quot;)&lt;&lt; endl; cout &lt;&lt; (p2 &#x3D;&#x3D; p3 ? &quot;相等&quot; : &quot;不相等&quot;)&lt;&lt; endl; cout &lt;&lt; (p1 !&#x3D; p2 ? &quot;不相等&quot; : &quot;相等&quot;)&lt;&lt; endl; cout &lt;&lt; (p2 !&#x3D; p3 ? &quot;不相等&quot; : &quot;相等&quot;)&lt;&lt; endl;&#125; 运行结果： 函数调用运算符重载1234567891011121314151617181920class Person &#123;public: void operator()(int b) &#123; cout &lt;&lt; b &lt;&lt; endl; &#125;&#125;;int main() &#123; Person p1; p1.operator()(6); &#x2F;&#x2F; 匿名函数对象 Person()(9);&#125; 运行结果： 菜鸟教程的C++ 重载运算符和重载函数 补充：","categories":[],"tags":[]},{"title":"hello-world","slug":"hello-world","date":"2020-05-08T07:07:25.909Z","updated":"2020-05-08T11:44:23.672Z","comments":true,"path":"2020/05/08/hello-world/","link":"","permalink":"http://yoursite.com/2020/05/08/hello-world/","excerpt":"","text":"#HAHAHAHAH","categories":[],"tags":[]}],"categories":[],"tags":[]}