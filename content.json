{"meta":{"title":"Arianna_blog","subtitle":"Arianna的博客","description":"Welcome to my blog!","author":"Arianna Wstson","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2020-05-12T03:09:15.293Z","updated":"2020-05-10T12:36:16.916Z","comments":true,"path":"Django-Web/index.html","permalink":"http://yoursite.com/Django-Web/index.html","excerpt":"","text":"Title L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"log\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/hijiki.model.json\"},\"display\":{\"position\":\"right\",\"width\":200,\"height\":400},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7}});"},{"title":"","date":"2020-05-12T07:10:58.059Z","updated":"2020-05-12T07:10:58.059Z","comments":true,"path":"C/index.html","permalink":"http://yoursite.com/C/index.html","excerpt":"","text":"Title L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"log\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/hijiki.model.json\"},\"display\":{\"position\":\"right\",\"width\":200,\"height\":400},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7}});"},{"title":"Django_Web","date":"2020-05-10T12:34:21.000Z","updated":"2020-05-10T13:05:46.191Z","comments":true,"path":"Django-Web/index.html","permalink":"http://yoursite.com/Django-Web/index.html","excerpt":"","text":""},{"title":"C++","date":"2020-05-12T07:02:23.000Z","updated":"2020-05-12T07:02:23.995Z","comments":true,"path":"C/index.html","permalink":"http://yoursite.com/C/index.html","excerpt":"","text":""},{"title":"","date":"2020-05-12T07:10:58.174Z","updated":"2020-05-12T07:10:58.174Z","comments":true,"path":"Hexo/index.html","permalink":"http://yoursite.com/Hexo/index.html","excerpt":"","text":"Title L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"log\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/hijiki.model.json\"},\"display\":{\"position\":\"right\",\"width\":200,\"height\":400},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7}});"},{"title":"","date":"2020-05-09T13:15:01.225Z","updated":"2020-05-09T13:15:01.225Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"Title L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"log\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/hijiki.model.json\"},\"display\":{\"position\":\"right\",\"width\":200,\"height\":400},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7}});"},{"title":"categories","date":"2020-05-10T12:18:22.000Z","updated":"2020-05-10T13:05:45.935Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-05-11T01:02:05.306Z","updated":"2020-05-11T01:02:05.306Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"C++"},{"title":"MySQL","date":"2020-05-13T02:11:24.000Z","updated":"2020-05-13T02:11:24.668Z","comments":true,"path":"MySQL/index.html","permalink":"http://yoursite.com/MySQL/index.html","excerpt":"","text":""},{"title":"Hexo","date":"2020-05-11T01:17:57.000Z","updated":"2020-05-11T01:17:57.046Z","comments":true,"path":"Hexo/index.html","permalink":"http://yoursite.com/Hexo/index.html","excerpt":"","text":""},{"title":"","date":"2020-05-13T02:26:08.948Z","updated":"2020-05-13T02:26:08.948Z","comments":true,"path":"MySQL/MySQL.html","permalink":"http://yoursite.com/MySQL/MySQL.html","excerpt":"","text":"Title L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"log\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/hijiki.model.json\"},\"display\":{\"position\":\"right\",\"width\":200,\"height\":400},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7}});"},{"title":"","date":"2020-05-14T01:12:35.100Z","updated":"2020-05-14T01:12:35.100Z","comments":true,"path":"Github/index.html","permalink":"http://yoursite.com/Github/index.html","excerpt":"","text":"Title L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"log\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/hijiki.model.json\"},\"display\":{\"position\":\"right\",\"width\":200,\"height\":400},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7}});"},{"title":"Github","date":"2020-05-14T01:04:26.000Z","updated":"2020-05-14T01:04:26.343Z","comments":true,"path":"Github/index.html","permalink":"http://yoursite.com/Github/index.html","excerpt":"","text":""},{"title":"blogs","date":"2020-05-10T13:07:06.000Z","updated":"2020-05-10T13:07:06.950Z","comments":true,"path":"blogs/index.html","permalink":"http://yoursite.com/blogs/index.html","excerpt":"","text":""},{"title":"Others","date":"2020-06-01T09:03:02.000Z","updated":"2020-06-01T09:03:02.513Z","comments":true,"path":"Others/index.html","permalink":"http://yoursite.com/Others/index.html","excerpt":"","text":""},{"title":"Algorithm","date":"2020-08-06T02:29:56.000Z","updated":"2020-08-06T02:29:56.879Z","comments":true,"path":"Algorithm/index.html","permalink":"http://yoursite.com/Algorithm/index.html","excerpt":"","text":""},{"title":"","date":"2020-08-06T02:30:50.301Z","updated":"2020-05-12T07:10:58.058Z","comments":true,"path":"Algorithm/index.html","permalink":"http://yoursite.com/Algorithm/index.html","excerpt":"","text":"Title L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"log\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/hijiki.model.json\"},\"display\":{\"position\":\"right\",\"width\":200,\"height\":400},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7}});"}],"posts":[{"title":"一天两道算法题(中等)(1)(Leetcode 39 40)","slug":"一天两道算法题(中等)(1)","date":"2020-08-01T11:40:33.000Z","updated":"2020-08-06T04:15:01.576Z","comments":true,"path":"2020/08/01/一天两道算法题(中等)(1)/","link":"","permalink":"http://yoursite.com/2020/08/01/%E4%B8%80%E5%A4%A9%E4%B8%A4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98(%E4%B8%AD%E7%AD%89)(1)/","excerpt":"Backtracking(回溯算法)：三步： 设置现场 DFS（递归） 回复现场（恢复现场）","text":"Backtracking(回溯算法)：三步： 设置现场 DFS（递归） 回复现场（恢复现场） 39. 组合总和 给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。 candidates 中的数字可以无限制重复被选取。 说明： 所有数字（包括 target）都是正整数。 解集不能包含重复的组合。 示例 1： 123456输入：candidates &#x3D; [2,3,6,7], target &#x3D; 7,所求解集为：[ [7], [2,2,3]] 示例 2： 1234567输入：candidates &#x3D; [2,3,5], target &#x3D; 8,所求解集为：[ [2,2,2,2], [2,3,3], [3,5]] 先实现这个递归，遍历给定的数组，如果遍历到当前元素比target大，直接遍历下一个元素，如果当前的元素值比target小或相等，那么就递归到下一层找第二个数 遍历给定的数组，如果当前元素&lt;=target，说明当前的元素有可能是结果中的一个，把当前这个元素放到临时的tmp列表中，然后遍历下一层 传递给下一层的值有candidates，因为需要继续遍历，但是传递给下一层的candidates不是完整的candidates，而是从当前元素开始的所有后面的candidates部分，因为如果遍历到3的时候，3为第一个元素，继续往下一层遍历是希望找到candidates3开始后面的元素是否有可能为结果的 传递给下一层的target要减去当前的candidates[i]，因为到下一层要判断target是否为0，如果为0说明当前的tmp就是一种结果，需要把tmp添加到res中 遍历后tmp需要pop掉这一层添加的节点是恢复现场，例如如果从头开始遍历，tmp为[]，target为7，遍历到第一层，tmp为[2],target为5，遍历到下一层,tmp为[2,2],target为3，继续下一层，tmp为[2,2,2],target为1，再遍历到下一层的时候第一个元素2已经大于target1了，所以直接返回，这时候返回到上一次，pop掉最后一个元素2,tmp变为[2,2]，当前的target为3，然后for循环遍历到3，因为3&lt;=target，所以tmp变为[2,2,3]，target传递给下一层为0，下一层会判断target为0，将tmp列表append到res中去 这里需要用到深拷贝，因为tmp在不断被修改，如果用浅拷贝，最后tmp会被修改为[]，这时候res中被append进的tmp也会变为[] 代码： 1234567891011121314151617class Solution: def combinationSum(self, candidates: List[int], target: int) -&gt; List[List[int]]: if not candidates: return [] return self.helper(candidates, [], [], target) def helper(self, candidates, tmp, res, target): if target &#x3D;&#x3D; 0: res.append(copy.deepcopy(tmp)) return res for i in range(len(candidates)): if candidates[i] &lt;&#x3D; target: tmp.append(candidates[i]) self.helper(candidates[i:], tmp, res,target - candidates[i]) tmp.pop() return res 40. 组合总和 II 给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。 candidates 中的每个数字在每个组合中只能使用一次。 说明： 所有数字（包括目标数）都是正整数。 解集不能包含重复的组合。 示例 1: 12345678输入: candidates &#x3D; [10,1,2,7,6,1,5], target &#x3D; 8,所求解集为:[ [1, 7], [1, 2, 5], [2, 6], [1, 1, 6]] 示例 2: 123456输入: candidates &#x3D; [2,5,2,1,2], target &#x3D; 5,所求解集为:[ [1,2,2], [5]] 和组合1的区别： 一个是在向下传递的时候，因为不能用重复的数字，所以向下传递的candidates[i:]变为了candidates[i+1:] 另一个是遍历到当前层，如果当前的列表元素值和前一个元素值相等，那就不遍历当前元素的下一层了，因为所有的可能结果在遍历前一个相等元素的时候，都找过了。 代码：1234567891011121314151617181920class Solution: def combinationSum2(self, candidates: List[int], target: int) -&gt; List[List[int]]: if not candidates: return [] candidates.sort() return self.helper(candidates, [], [], target) def helper(self, candidates, tmp, res, target): if target &#x3D;&#x3D; 0: res.append(copy.deepcopy(tmp)) return res for i in range(len(candidates)): if i &gt; 0 and candidates[i] &#x3D;&#x3D; candidates[i - 1]: continue if candidates[i] &lt;&#x3D; target: tmp.append(candidates[i]) self.helper(candidates[i+1:], tmp, res, target-candidates[i]) tmp.pop() return res","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://yoursite.com/categories/Algorithm/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://yoursite.com/tags/Algorithm/"}]},{"title":"一天两道算法题（中等）(2)(Leetcode 78 )","slug":"一天两道算法题(中等)(3)","date":"2020-08-01T11:40:33.000Z","updated":"2020-08-06T04:12:23.593Z","comments":true,"path":"2020/08/01/一天两道算法题(中等)(3)/","link":"","permalink":"http://yoursite.com/2020/08/01/%E4%B8%80%E5%A4%A9%E4%B8%A4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98(%E4%B8%AD%E7%AD%89)(3)/","excerpt":"78. 子集难度：中等","text":"78. 子集难度：中等 给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。说明：解集不能包含重复的子集。 示例: 123456789101112输入: nums &#x3D; [1,2,3]输出:[ [3], [1], [2], [1,2,3], [1,3], [2,3], [1,2], []] 初始化res数组作为返回的结果集，初始化为[[]]，也就是第一个返回的结果为空数组。 然后遍历整数数组nums，每遍历到一个值，就把res中所有的结果加上这个当前的数组值，然后把这些所有的可能加到res中 例如遍历到1，当前res中只有一个空数组，那么把空数组+[1]，作为一个结果append到res中，这时res为[[],[1]] 遍历到2，当前res为[[],[1]]，把res中的所有可能加上[2]，就得到[2],[1,2]，把这些结果加到res中，res变为[[],[1],[2],[1,2]] 代码： 12345678class Solution: def subsets(self, nums: List[int]) -&gt; List[List[int]]: res &#x3D; [[]] for i in nums: # res[:]复制了一份副本 for subset in res[:]: res.append(subset + [i]) return res","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://yoursite.com/categories/Algorithm/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://yoursite.com/tags/Algorithm/"}]},{"title":"Anki2.1插件推荐","slug":"Anki插件推荐","date":"2020-06-01T11:40:33.000Z","updated":"2020-06-01T09:01:06.998Z","comments":true,"path":"2020/06/01/Anki插件推荐/","link":"","permalink":"http://yoursite.com/2020/06/01/Anki%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/","excerpt":"插件首页https://ankiweb.net/shared/addons/2.1","text":"插件首页https://ankiweb.net/shared/addons/2.1 插件1 ReviewHeatmap下载地址：https://ankiweb.net/shared/info/723520343 插件代码：723520343 展示： 说明： 用颜色的深浅表示当天看了多少卡片，右上角的可以设置颜色和其他。 插件2 AwesomeTTS for Anki 2.1下载地址：https://ankiweb.net/shared/info/814349176 插件代码：814349176 展示： 说明： 可以插入单词读音。 插件3 Large and Colorful Buttons下载地址：https://ankiweb.net/shared/info/1829090218 插件代码：1829090218 展示： 说明： 比较大的按键。 插件4 Colorful toolbars下载地址：https://ankiweb.net/shared/info/388296573 插件代码：388296573 展示： 说明： 把首页文字的按键变成了图标。","categories":[{"name":"Others","slug":"Others","permalink":"http://yoursite.com/categories/Others/"}],"tags":[{"name":"Anki","slug":"Anki","permalink":"http://yoursite.com/tags/Anki/"}]},{"title":"解决Github访问慢的方法","slug":"解决Github访问慢的方法","date":"2020-05-14T00:43:03.000Z","updated":"2020-05-23T06:29:46.186Z","comments":true,"path":"2020/05/14/解决Github访问慢的方法/","link":"","permalink":"http://yoursite.com/2020/05/14/%E8%A7%A3%E5%86%B3Github%E8%AE%BF%E9%97%AE%E6%85%A2%E7%9A%84%E6%96%B9%E6%B3%95/","excerpt":"1.使用浏览器访问https://www.ipaddress.com/。在这个位置分别输入github.com和github.global.ssl.fastly.net","text":"1.使用浏览器访问https://www.ipaddress.com/。在这个位置分别输入github.com和github.global.ssl.fastly.net 搜索一下~找到github.com对应的ip： 找到github.global.ssl.fastly.net对应的ip： 每台电脑获取的ip应该不一样。我获取的是140.82.112.3和199.232.69.194。 2.Windows系统打开以下目录：C:\\Windows\\System32\\drivers\\etc用记事本打开host文件，把以下内容添加进去： 140.82.112.3 github.com199.232.69.194 github.global.ssl.fastly.Net 保存、关闭。 3.打开cmd用windows+R打开：输入cmd，回车。在小黑框里输入ipconfig /flushdns，更新DNS缓存。 4.再次访问Github快多啦！","categories":[{"name":"Github","slug":"Github","permalink":"http://yoursite.com/categories/Github/"}],"tags":[{"name":"Github","slug":"Github","permalink":"http://yoursite.com/tags/Github/"}]},{"title":"置顶","slug":"置顶","date":"2020-05-09T11:40:33.000Z","updated":"2020-05-26T06:37:33.368Z","comments":true,"path":"2020/05/09/置顶/","link":"","permalink":"http://yoursite.com/2020/05/09/%E7%BD%AE%E9%A1%B6/","excerpt":"","text":"博客搬迁中。。。源地址：https://www.jianshu.com/u/400aba58cff5","categories":[],"tags":[]},{"title":"C++运算符重载实现(加号、左移、递增、赋值、关系运算符、函数调用)","slug":"C++运算符重载实现(加号、左移、递增、赋值、关系运算符、函数调用)","date":"2020-05-06T11:40:33.000Z","updated":"2020-05-12T07:11:51.710Z","comments":true,"path":"2020/05/06/C++运算符重载实现(加号、左移、递增、赋值、关系运算符、函数调用)/","link":"","permalink":"http://yoursite.com/2020/05/06/C++%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%E5%AE%9E%E7%8E%B0(%E5%8A%A0%E5%8F%B7%E3%80%81%E5%B7%A6%E7%A7%BB%E3%80%81%E9%80%92%E5%A2%9E%E3%80%81%E8%B5%8B%E5%80%BC%E3%80%81%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8)/","excerpt":"先来复习一下C++的内存分区问题~","text":"先来复习一下C++的内存分区问题~ C++内存分区C++程序的内存分区可划分为四大内存分区：堆、栈、全局/静态存储区和代码区。 不同类型的变量存放的区域不同。 在程序被编译为exe可执行文件后，未运行之前，分为两个区域：代码区和全局区。 代码区存放程序体的二进制代码。比如我们写的函数，都是在代码区的。 123456789101112int a &#x3D; 0;&#x2F;&#x2F;静态全局变量区char *p1; &#x2F;&#x2F;编译器默认初始化为NULLvoid main()&#123; int b; &#x2F;&#x2F;栈 char s[] &#x3D; &quot;abc&quot;;&#x2F;&#x2F;栈 char *p2 &#x3D; &quot;123456&quot;;&#x2F;&#x2F;123456在字符串常量区，p2在栈上 static int c &#x3D;0; &#x2F;&#x2F;c在静态变量区，0为文字常量，在代码区 const int d&#x3D;0; &#x2F;&#x2F;栈 static const int d;&#x2F;&#x2F;静态常量区 p1 &#x3D; (char *)malloc(10);&#x2F;&#x2F;分配得来得10字节在堆区。 strcpy(p1, &quot;123456&quot;); &#x2F;&#x2F;123456放在字符串常量区，编译器可能会将它与p2所指向的&quot;123456&quot;优化成一个地方 &#125; 以上所有代码，编译成二进制后存放于代码区，文字常量存放于代码区，是不可寻址的。 全局区全局区存储全局变量，静态变量，还包括了常量区，字符串常量和其他常量（const修饰的全局变量）也存放在全局区。全局区的数据在程序结束后由操作系统释放。 程序运行之后 栈区由编译器自动释放，存放函数的参数值，局部变量等。整个程序的栈区的大小可以在编译器中由用户自行设定。 注意：不要返回局部变量地址。 堆区由编程人员手动申请，手动释放，若不手动释放，程序结束后由系统回收，生命周期是整个程序运行期间。使用new进行堆的申请，堆的总大小为机器的虚拟内存的大小。new返回的是该数据类型的指针。 1int * p &#x3D; new int(10); 使用delete进行释放。 重载方式有两种：1.重载的函数作为成员函数。2.重载的函数作为全局函数函数名是规定的：operator+ 加号运算符（“+”）重载对于内置的数据类型，编译器知道如何进行运算。两个自定义的数据类型，进行相加，就需要进行加号运算符重载。 成员函数实现加号重载： 12345678910111213141516171819202122232425class Person&#123;public: Person operator+(Person &amp;p)&#123; Person tmp; tmp.a &#x3D; this-&gt;a + p.a; tmp.b &#x3D; this-&gt;b + p.b; return tmp; &#125; int a; int b;&#125;;int main()&#123; Person A; A.a &#x3D; 10; A.b &#x3D; 20; Person B; B.a &#x3D; 1; B.b &#x3D; 3; Person C; C &#x3D; A + B; cout &lt;&lt; C.a &lt;&lt; &quot; &quot; &lt;&lt; C.b &lt;&lt; endl;&#125; 运行结果： 全局函数实现加号重载： 1234567891011121314151617181920212223242526class Person&#123;public: int a; int b;&#125;;Person operator+(Person &amp;p1,Person &amp;p2)&#123; &#x2F;&#x2F;需要传入两个参数 Person tmp; tmp.a &#x3D; p1.a + p2.a; tmp.b &#x3D; p1.b + p2.b; return tmp;&#125;int main()&#123; Person A; A.a &#x3D; 10; A.b &#x3D; 20; Person B; B.a &#x3D; 1; B.b &#x3D; 3; Person C; C &#x3D; A + B; cout &lt;&lt; C.a &lt;&lt; &quot; &quot; &lt;&lt; C.b &lt;&lt; endl;&#125; 运行结果： 运算符重载也可以发生函数重载 12345678910111213141516171819202122232425262728293031323334353637class Person&#123;public: int a; int b;&#125;;Person operator+(Person &amp;p1,Person &amp;p2)&#123; Person tmp; tmp.a &#x3D; p1.a + p2.a; tmp.b &#x3D; p1.b + p2.b; return tmp;&#125;Person operator+(Person &amp;p1,int n)&#123; &#x2F;&#x2F;函数重载 Person tmp; tmp.a &#x3D; p1.a + n; tmp.b &#x3D; p1.b + n; return tmp;&#125;int main()&#123; Person A; A.a &#x3D; 10; A.b &#x3D; 20; Person B; B.a &#x3D; 1; B.b &#x3D; 3; Person C; C &#x3D; A + B; cout &lt;&lt; C.a &lt;&lt; &quot; &quot; &lt;&lt; C.b &lt;&lt; endl; Person D; D &#x3D; A + 10; cout &lt;&lt; D.a &lt;&lt; &quot; &quot; &lt;&lt; D.b &lt;&lt; endl;&#125; 运行结果: 左移运算符（“&lt;&lt;”）符重载可以输出自定义的数据类型。 123456789101112131415161718192021class Person&#123;public: int a; int b;&#125;;ostream&amp; operator&lt;&lt;(ostream &amp;cout , Person &amp;p)&#123; cout &lt;&lt; p.a &lt;&lt; &quot; &quot; &lt;&lt; p.b &lt;&lt; endl; return cout; &#x2F;&#x2F;返回cout 可以实现链式编程&#125;int main()&#123; Person A; A.a &#x3D; 10; A.b &#x3D; 20; cout &lt;&lt; A &lt;&lt; endl;&#125; 运行结果： 左移运算符重载无法用成员函数来实现因为要实现的是cout &lt;&lt; A &lt;&lt; endl;看例子吧~ 123456789101112131415161718192021222324#include &lt;iostream&gt;using namespace std;#include &lt;string&gt;class Person&#123;public: int a; int b; ostream&amp; operator&lt;&lt;(ostream &amp;cout)&#123; cout &lt;&lt; this-&gt;a &lt;&lt; &quot; &quot; &lt;&lt; this-&gt;b &lt;&lt; endl; return cout; &#125;&#125;;int main()&#123; Person A; A.a &#x3D; 10; A.b &#x3D; 20; A &lt;&lt; cout &lt;&lt; endl; &#x2F;&#x2F;如果用成员函数，最后实现了是这样的。。。(因为是A调用，所以A写在前)&#125; 运行结果： 递增运算符（“++”）重载123456789101112131415161718192021222324252627282930313233343536373839class Person&#123;public: int a; int b; Person&amp; operator++()&#123; &#x2F;&#x2F;前置递增返回的是引用，这样++(++A)也不会出错 a++; b++; return *this; &#125; &#x2F;&#x2F;后置递增返回的是值 Person operator++(int)&#123; &#x2F;&#x2F;int是占位参数，可以用来区分前置和后置，必须写int，其他类型不可以 Person tmp &#x3D; *this; a++; b++; return tmp; &#125;&#125;;ostream&amp; operator&lt;&lt;(ostream &amp;cout , Person &amp;p)&#123; cout &lt;&lt; p.a &lt;&lt; &quot; &quot; &lt;&lt; p.b &lt;&lt; endl; return cout;&#125;int main()&#123; Person A; A.a &#x3D; 10; A.b &#x3D; 20; cout &lt;&lt; &quot;原始A的值：&quot; &lt;&lt;A &lt;&lt; endl; ++A; cout &lt;&lt; &quot;A++后的值：&quot; &lt;&lt; A &lt;&lt; endl; A++; cout &lt;&lt; &quot;A++后的值：&quot; &lt;&lt; A &lt;&lt; endl;&#125; 运行结果： 赋值运算符（“=”）重载存在复制运算符的原因是堆区的数据重复释放，也就是浅拷贝的问题。详细解释： 在对象P1中new一个age变量，这个遍历被存储在堆区，需要程序员手动申请，手动释放，把P1赋给p2时，P2也指向这个堆区的地址空间，所以当使用析构函数对堆区数据进行释放时，P1释放了一次，P2又释放了一次，出现了堆区数据重复释放的情况，程序崩溃。 解决方案：利用深拷贝来解决浅拷贝的问题。因为出现程序崩溃的主要原因是，当p2 = p1时，p2直接指向了0x0011这块地址，使用赋值运算符重载，使p2 = p1时，p2开辟一个新的地址空间用来存储年龄18这个数据，这样在释放时，就不会重复释放了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445class Person &#123;public: Person(int age) &#123; this-&gt;age &#x3D; new int(age); &#125; int *age; ~Person() &#123; if (age !&#x3D; NULL) &#123; delete age; age &#x3D; NULL; &#125; &#125; Person &amp;operator&#x3D;(Person &amp;p) &#123; &#x2F;&#x2F;返回类型是Person，可以链式赋值，p3 &#x3D; p2 &#x3D; p1 if (this-&gt;age !&#x3D; NULL) &#123; delete age; age &#x3D; NULL; &#125; age &#x3D; new int(*p.age); return *this; &#125;&#125;;int main() &#123; Person p1(10); cout &lt;&lt; *p1.age &lt;&lt; endl; &#x2F;&#x2F;p1.age是指针 Person p2(18); cout &lt;&lt; *p2.age &lt;&lt; endl; p2 &#x3D; p1; cout &lt;&lt; *p2.age &lt;&lt; endl; Person p3(20); cout &lt;&lt; *p3.age &lt;&lt; endl; p1 &#x3D; p2 &#x3D; p3; cout &lt;&lt; *p1.age &lt;&lt; &quot; &quot; &lt;&lt; *p2.age &lt;&lt; &quot; &quot; &lt;&lt; *p3.age &lt;&lt; endl;&#125; 运行结果： 关系运算符重载1234567891011121314151617181920212223242526272829303132333435public: Person(string name, int age,int sex) &#123; this-&gt;name &#x3D; name; this-&gt;age &#x3D; age; this-&gt;sex &#x3D; sex; &#125; string name; int age; int sex; bool operator&#x3D;&#x3D;(Person &amp;p)&#123; return this-&gt;name &#x3D;&#x3D; p.name &amp;&amp; this-&gt;age &#x3D;&#x3D; p.age &amp;&amp; this-&gt;sex &#x3D;&#x3D; p.sex; &#125; bool operator!&#x3D;(Person &amp;p)&#123; return !(this-&gt;name &#x3D;&#x3D; p.name &amp;&amp; this-&gt;age &#x3D;&#x3D; p.age &amp;&amp; this-&gt;sex &#x3D;&#x3D; p.sex); &#125;&#125;;int main() &#123; Person p1(&quot;Tom&quot;,23,1); Person p2(&quot;Tom&quot;,23,1); Person p3(&quot;Amy&quot;,23,2); cout &lt;&lt; (p1 &#x3D;&#x3D; p2 ? &quot;相等&quot; : &quot;不相等&quot;)&lt;&lt; endl; cout &lt;&lt; (p2 &#x3D;&#x3D; p3 ? &quot;相等&quot; : &quot;不相等&quot;)&lt;&lt; endl; cout &lt;&lt; (p1 !&#x3D; p2 ? &quot;不相等&quot; : &quot;相等&quot;)&lt;&lt; endl; cout &lt;&lt; (p2 !&#x3D; p3 ? &quot;不相等&quot; : &quot;相等&quot;)&lt;&lt; endl;&#125; 运行结果： 函数调用运算符重载1234567891011121314151617181920class Person &#123;public: void operator()(int b) &#123; cout &lt;&lt; b &lt;&lt; endl; &#125;&#125;;int main() &#123; Person p1; p1.operator()(6); &#x2F;&#x2F; 匿名函数对象 Person()(9);&#125; 运行结果： 菜鸟教程的C++ 重载运算符和重载函数 补充：","categories":[{"name":"C","slug":"C","permalink":"http://yoursite.com/categories/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"}]},{"title":"Python实现排序及时间空间复杂度分析","slug":"Python实现排序及时间空间复杂度分析","date":"2020-03-11T13:54:19.000Z","updated":"2020-05-13T01:59:35.776Z","comments":true,"path":"2020/03/11/Python实现排序及时间空间复杂度分析/","link":"","permalink":"http://yoursite.com/2020/03/11/Python%E5%AE%9E%E7%8E%B0%E6%8E%92%E5%BA%8F%E5%8F%8A%E6%97%B6%E9%97%B4%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/","excerpt":"原文链接：https://www.jianshu.com/p/e398e4c3bb05 一、冒泡排序（Bubble Sort）原理： 比较相邻的元素。如果第一个比第二个大，就交换他们两个。（从头到尾，从尾到头都可以） 对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。 针对所有的元素重复以上的步骤，除了最后一个。 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。","text":"原文链接：https://www.jianshu.com/p/e398e4c3bb05 一、冒泡排序（Bubble Sort）原理： 比较相邻的元素。如果第一个比第二个大，就交换他们两个。（从头到尾，从尾到头都可以） 对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。 针对所有的元素重复以上的步骤，除了最后一个。 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。 动画： 图片说明第一次排序：图片说明所有排序： Python实现： 123456def BubbleSort(matrix): for i in range(len(matrix) - 1): for j in range(len(matrix)-i-1):#要用到j+1，防止溢出，减掉1 if matrix[j] &gt; matrix[j + 1]: matrix[j], matrix[j + 1] &#x3D; matrix[j + 1], matrix[j] return matrixB 从左到右找到依次找到较大的元素，如果左边的元素比右边的元素大，交换这两个元素。一共循环了len（matrix）-1次。 优化:如果一个已经排好的数组，用这个算法还是要比较很多次。所以增加一个flag，赋值为True，在一次循环中，如果没有两个元素进行交换，说明数组是已经排好序的，在当前循环结束时，flag的值没有发生改变依旧为True，可直接break出循环。 123456789def BubbleSort(matrix): flag &#x3D; True for i in range(len(matrix) - 1): for j in range(len(matrix) - i - 1): if matrix[j] &gt; matrix[j + 1]: matrix[j], matrix[j + 1] &#x3D; matrix[j + 1], matrix[j] flag &#x3D; False if (flag): break return matrix 时间复杂度分析：外层的for时间复杂度为O（n）里层的时间复杂度分析如下：因为里层的起点是0，结束是len（matrix）-i-1，（以下用n代替len（matrix））当i == 0 时，里层循环是n-1次，i == 1时，循环为n-1次，当i == n-1时，需要0次。把i为（0，n-1）时所有的循环次数加起来就是从0加到n-1，值为首项加尾项乘以项数除以二，即（0+n-1）n/2，这个的时间复杂度我O（n）。所有里层的循环时间复杂度为O（n）。所以时间复杂度为O（n^2） 最差情况是需要交换n^2次，最好情况是不需要交换。 空间复杂度：不需要额外的空间。所以O（1） 稳定性：冒泡排序是一个稳定的排序方式，比如matrix = [25, 25, 3, 9, 23, 44, 29]时，出现了两个25，在冒泡排序结束后，从左边数的第一个25，在排序结束时，依旧是从左数的第一个25，它不会出现在第二个25的右面。（因为在元素相等的时候没有进行交换） 二、选择排序（Selction Sort）原理：第一次循环找出最大值（最小值），记录其下标，把他与最末尾（首）的元素交换，第二次找到第二大的，与倒数第二末尾的元素进行交换。第一次循环的范围是（0，数组长度-1），第二次是（0，数组长度-2）动画：图片说明：Python实现： 12345678910def SelectionSort(matrix): n &#x3D; len(matrix) for i in range(n): index &#x3D; 0 for j in range(n - i): if matrix[j] &gt; matrix[index]: index &#x3D; j matrix[n - i - 1], matrix[index] &#x3D; matrix[index], matrix[n - i - 1] return matrix 时间复杂度分析：两次for循环：O（n^2），进行了O（n）次交换。 空间复杂度：不需要额外的空间。所以O（1） 稳定性：不稳定。 三、插入排序（Insert Sort）原理：相当于打牌时候摸牌，如数组[25, 5, 3, 9, 23, 44, 29]，第一张摸到的牌是25，第二张摸到了5，与25比较大小，放在25前面，依次摸完所有的牌，也就排序结束了。动画：图片说明：Python实现： 123456789101112def InsertSort(matrix): n &#x3D; len(matrix) for i in range(1, n): cur &#x3D; i pre &#x3D; cur - 1 while pre &gt;&#x3D; 0 and matrix[cur] &lt; matrix[pre]: if matrix[cur] &lt; matrix[pre]: matrix[pre], matrix[cur] &#x3D; matrix[cur], matrix[pre] cur &#x3D; pre pre &#x3D; cur - 1 return matrix 定义一个cur来存储当前的下标，因为pre是cir-1，所以循环从1开始。 12345678910def InsertSort(matrix): n &#x3D; len(matrix) for i in range(1, n): cur &#x3D; i while cur - 1 &gt;&#x3D; 0 and matrix[cur] &lt; matrix[cur - 1]: if matrix[cur] &lt; matrix[cur - 1]: matrix[cur - 1], matrix[cur] &#x3D; matrix[cur], matrix[cur - 1] cur -&#x3D; 1 return matrix 把pre用cur-1代替了。 也可以： 1234567891011def InsertSort(matrix): for i in range(1, len(matrix)): tmp &#x3D; i while i &gt; 0: if matrix[i] &lt; matrix[i - 1]: matrix[i], matrix[i - 1] &#x3D; matrix[i - 1], matrix[i] i -&#x3D; 1 else: break return matrix 时间复杂度分析：两个嵌套的循环，时间复杂度是O(n^2)。虽然时间复杂度也是O(n^2)，但是第二层循环不需要与所有元素进行比较，所以在性能上优于冒泡排序和选择排序。空间复杂度：没有额外的存储空间，是原地排序算法O（1）。稳定性：稳定 四、希尔排序（Shell Sort）原理：实际上是插入排序的扩展，把数组分成几组，比如数组[25, 5, 3, 9, 23, 44, 29]，数组长度n为7，取gap = n/2，把数组的[i]和[i+gap]作为一组，比较[i]和[i+gap]的大小，如果[i]&gt;[i+gap]，交换[i]和[i+gap]，如果[i]&lt;[i+gap]，则继续比较[i+1]和[i+gap+1]，把数组里的所有元素都比较完之后，再把gap的值减小，可以减1，也可以把gap/2，继续比较，直至最后一次把数组中的所有元素作为一个整体排序。动画：图片说明：Python实现： 1234567891011121314def ShellSort(matrix): n &#x3D; len(matrix) gap &#x3D; n &#x2F;&#x2F; 2 while gap &gt; 0: for i in range(gap, n): for tmp in range(i, gap - 1, -gap): if matrix[tmp] &lt; matrix[tmp - gap]: matrix[tmp], matrix[tmp - gap] &#x3D; matrix[tmp - gap], matrix[tmp] if gap &#x3D;&#x3D; 2: gap &#x3D; 1 else: gap &#x2F;&#x2F;&#x3D; 2 return matrix 五、计数排序（Count Sort）使用范围：数组长度有限，较小。出现的重复数字比较多，并且这些数值较为集中。原理：抽屉原理：遍历数组，把相同的值都放到同一个抽屉中，遍历结束后，按照值从小到大的顺序依次取出，即排列完成。动画： 图片说明： Python实现： 1234567891011121314151617181920def CountSort(matrix): max &#x3D; matrix[0] min &#x3D; matrix[0] for i in matrix: #找到list中的最大元素和最小元素 if i &gt; max: max &#x3D; i if i &lt; min: min &#x3D; i tmp &#x3D; [0] * (max - min + 1) # 定义一个新的数组，长度为最大值减最小值加一 for i in range(len(matrix)): #把原来数组中每个数字出现了多少次存在新数组中 tmp[matrix[i] - min] +&#x3D; 1 index &#x3D; 0 for j in range(len(tmp)): # while tmp[j] &gt; 0: matrix[index] &#x3D; min + j index +&#x3D; 1 tmp[j] -&#x3D; 1 return matrix 时间复杂度分析：第一个循环：O（n）第二个循环：O（n）第三个循环：O（n），虽然有两个for但是实际上是从头到尾把元素都拿出来，只走了一遍所以时间复杂度还是O（n）所以时间复杂度为O（n）稳定性：不稳定 六、归并排序（Merge Sort）原理：把数组从中间分成前后两个数组，再把前后两个数组每个数组再分，分到最小，然后对前后两部分分别排序，再将排好序的两部分合并在一起。 图片说明：Python实现： 1234567891011121314151617181920212223242526272829def MergeSort(matrix): matrix &#x3D; devide(matrix) return matrixdef devide(matrix): if len(matrix) &lt;&#x3D; 1: return matrix m &#x3D; len(matrix) &#x2F;&#x2F; 2 a &#x3D; devide(matrix[:m]) b &#x3D; devide(matrix[m:]) return merge(a, b)def merge(num1,num2): num &#x3D; [] while len(num1) &gt; 0 and len(num2) &gt; 0: if num1[0] &gt; num2[0]: num.append(num2[0]) num2.remove(num2[0]) else: num.append(num1[0]) num1.remove(num1[0]) if len(num1) &#x3D;&#x3D; 0: num +&#x3D; num2 else: num +&#x3D; num1 return num 时间复杂度：时间复杂度是 O(nlogn)，要优于 O(n^2)。空间复杂度：空间复杂度是 O(n)。稳定性：稳定 七、快速排序（Quick Sort）原理：数组的一个元素赋给下标赋给first，末尾下标赋给last，把数组从左到右第一个元素的值赋给pivot，从数组末尾往前找到第一个比pivot值小的数，赋给matrix[first]，再从first往后找到第一个比pivot大的值，当first与last相遇时，把pivot的值赋给matrix[first]或matrix[last]，然后递归。 Python实现： 123456789101112131415161718192021def QuickSort(matrix, i, j): if i &gt;&#x3D; j or i &lt; 0 or j &gt; len(matrix)-1: return else: first &#x3D; i last &#x3D; j pivot &#x3D; matrix[i] while first &lt; last: while first &lt; last and matrix[last] &gt; pivot: last -&#x3D; 1 matrix[i] &#x3D; matrix[last] while first &lt; last and matrix[first] &lt; pivot: first +&#x3D; 1 matrix[last] &#x3D; matrix[first] matrix[first]&#x3D; pivot QuickSort(matrix, i, first - 1) QuickSort(matrix, first + 1, j) return matrix 快排参考链接：https://blog.csdn.net/u010005281/article/details/80084994 文章参考：硬核！C语言八大排序算法，附动图和详细代码解释！这或许是东半球分析十大排序算法最好的一篇文章十大经典排序算法（动图演示）数据结构与算法系列（五）基于选择的排序算法","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"}]}],"categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://yoursite.com/categories/Algorithm/"},{"name":"Others","slug":"Others","permalink":"http://yoursite.com/categories/Others/"},{"name":"Github","slug":"Github","permalink":"http://yoursite.com/categories/Github/"},{"name":"C","slug":"C","permalink":"http://yoursite.com/categories/C/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://yoursite.com/tags/Algorithm/"},{"name":"Anki","slug":"Anki","permalink":"http://yoursite.com/tags/Anki/"},{"name":"Github","slug":"Github","permalink":"http://yoursite.com/tags/Github/"},{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"}]}