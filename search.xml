<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一天两道算法题(中等)(5)(Leetcode 15 18)</title>
      <link href="/2020/08/05/%E4%B8%80%E5%A4%A9%E4%B8%A4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98(%E4%B8%AD%E7%AD%89)(5)/"/>
      <url>/2020/08/05/%E4%B8%80%E5%A4%A9%E4%B8%A4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98(%E4%B8%AD%E7%AD%89)(5)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">15. 三数之和</a></p><ul><li>把数组先排序，然后遍历这个数组</li><li>因为数组已经排好序，所以遍每当遍历到一个新的元素，可以排除几种情况<ul><li>如果当前的数是nums[i]，如果nums[i]+nums[i+1]+nums[i+2]的值都比0大，说明后面的元素已经不可能有三个数的和等于0了，可以break掉循环</li><li>如果当前的数加上排好序数组的倒数第一个和倒数第二个数的值的和比0还小，也就是当前的值加上数组中最大的两个值还小于0，那么直接continue，遍历下一个值</li><li>如果当前的下标大于0，而且nums[i] == nums[i - 1]，也就是当前的数等于它前一个数，那么也之间continue不找这个数的组合了，因为结果集中要求没有重复的三原组<a id="more"></a></li></ul></li><li>然后设置两个下标值，一个left，一个right，让left从i的下一个值开始往后遍历，让right从数组的末尾开始往前遍历</li><li>计算当前的tmp值，tmp = nums[i]+nums[left]+nums[right]<ul><li>如果当前的tmp比0大，说明right找大了，把right-1</li><li>如果当前的tmp比0小，说明left找小了，把left+1</li><li>如果当前的tmp为0，说明当前是一个结果，把[nums[i],nums[left],nums[right]]这个列表append到结果集中（结果集res = []）<ul><li>如果当前的left &lt; right，那么继续找不同的left和right</li><li>这时候要做一件事情是去重，找到第一个不和刚才的right值相同的right</li><li>找到第一个不和刚才的left的值相同的left</li><li>这一块看代码的时候要注意一下</li></ul></li></ul></li><li>最后返回结果集<br>代码：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        res = []</span><br><span class="line">        <span class="comment"># 因为要给left和right留位置，所以只遍历到len(nums)-2的位置</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) - <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[len(nums) - <span class="number">1</span>] + nums[len(nums) - <span class="number">2</span>] &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[i + <span class="number">1</span>] + nums[i + <span class="number">2</span>] &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            left = i + <span class="number">1</span></span><br><span class="line">            right = len(nums) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                tmp = nums[i] + nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> tmp == <span class="number">0</span>:</span><br><span class="line">                    res.append([nums[i], nums[left], nums[right]])</span><br><span class="line">                    <span class="comment"># left如果和left-1的值不同，说明当前的left已经和之前的值不一样了</span></span><br><span class="line">                    <span class="comment"># 但是right因为边界的问题，与之进行比较的right-1，所以当right的值和right-1的值不同时，right当前的值是最后一个与之前right相等的值</span></span><br><span class="line">                    <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[left] == nums[left - <span class="number">1</span>]:</span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[right] == nums[right - <span class="number">1</span>]:</span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">                    <span class="comment"># 所以到这里right还要-1</span></span><br><span class="line">                    <span class="comment"># 这里说的left的值和right的值等价于nums[left]和nums[right]</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> tmp &gt; <span class="number">0</span>:</span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://leetcode-cn.com/problems/4sum/" target="_blank" rel="noopener">18. 四数之和</a></p><ul><li>总体上和三数之和的思路差不多</li></ul><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fourSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        res = []</span><br><span class="line">        <span class="comment"># 第一个区别是遍历到len(nums)-3就结束了</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) - <span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[i + <span class="number">1</span>] + nums[i + <span class="number">2</span>] + nums[i + <span class="number">3</span>] &gt; target:</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[len(nums) - <span class="number">1</span>] + nums[len(nums) - <span class="number">2</span>] + nums[len(nums) - <span class="number">3</span>] &lt; target:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 第二个是这里嵌套了循环，上面的循环是用来找第一个数，下面的循环用来找第二个和第三个数</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(nums) - <span class="number">2</span>):</span><br><span class="line">                <span class="comment"># 这里有一个需要去重的地方，注意是j &gt; i + 1</span></span><br><span class="line">                <span class="keyword">if</span> j &gt; i + <span class="number">1</span> <span class="keyword">and</span> nums[j] == nums[j - <span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                left = j + <span class="number">1</span></span><br><span class="line">                right = len(nums) - <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                    tmp = nums[i] + nums[j] + nums[left] + nums[right]</span><br><span class="line">                    <span class="keyword">if</span> tmp == target:</span><br><span class="line">                        res.append([nums[i], nums[j], nums[left], nums[right]])</span><br><span class="line">                        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[left] == nums[left + <span class="number">1</span>]:</span><br><span class="line">                            left += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[right] == nums[right - <span class="number">1</span>]:</span><br><span class="line">                            right -= <span class="number">1</span></span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">elif</span> tmp &gt; target:</span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一天两道算法题(中等)(4)(Leetcode 46 47)</title>
      <link href="/2020/08/04/%E4%B8%80%E5%A4%A9%E4%B8%A4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98(%E4%B8%AD%E7%AD%89)(4)/"/>
      <url>/2020/08/04/%E4%B8%80%E5%A4%A9%E4%B8%A4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98(%E4%B8%AD%E7%AD%89)(4)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/permutations/" target="_blank" rel="noopener">46. 全排列</a></p><p>和之前的所有本系列的题的解法一致~</p><a id="more"></a><p>给定一个 没有重复 数字的序列，返回其所有可能的全排列。</p><p>示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>回溯法：</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permute</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">return</span> self.helper(nums, [], [], len(nums))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, nums, tmp, res, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(tmp) == n:</span><br><span class="line">            res.append(copy.deepcopy(tmp))</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            tmp.append(nums[i])</span><br><span class="line">            self.helper(nums[:i]+nums[i+<span class="number">1</span>:], tmp, res, n)</span><br><span class="line">            tmp.pop()</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/permutations-ii/" target="_blank" rel="noopener">47. 全排列 II</a></p><p>给定一个可包含重复数字的序列，返回所有不重复的全排列。</p><p>示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permuteUnique</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">return</span> self.helper(nums, [], [], len(nums))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, nums, res, tmp, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(tmp) == n:</span><br><span class="line">            res.append(copy.deepcopy(tmp))</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            tmp.append(nums[i])</span><br><span class="line">            self.helper(nums[:i] + nums[i+<span class="number">1</span>:], res, tmp, n)</span><br><span class="line">            tmp.pop()</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一天两道算法题(中等)(3)(Leetcode 78 90)</title>
      <link href="/2020/08/03/%E4%B8%80%E5%A4%A9%E4%B8%A4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98(%E4%B8%AD%E7%AD%89)(3)/"/>
      <url>/2020/08/03/%E4%B8%80%E5%A4%A9%E4%B8%A4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98(%E4%B8%AD%E7%AD%89)(3)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/subsets/" target="_blank" rel="noopener">78. 子集</a><br>难度：中等</p><a id="more"></a><ul><li>给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。<br>说明：解集不能包含重复的子集。</li></ul><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入: nums &#x3D; [1,2,3]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [1],</span><br><span class="line">  [2],</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><p>初始化res数组作为返回的结果集，初始化为[[]]，也就是第一个返回的结果为空数组。</p></li><li><p>然后遍历整数数组nums，每遍历到一个值，就把res中所有的结果加上这个当前的数组值，然后把这些所有的可能加到res中</p></li><li><p>例如遍历到1，当前res中只有一个空数组，那么把空数组+[1]，作为一个结果append到res中，这时res为[[],[1]]</p></li><li><p>遍历到2，当前res为[[],[1]]，把res中的所有可能加上[2]，就得到[2],[1,2]，把这些结果加到res中，res变为[[],[1],[2],[1,2]]</p></li><li><p>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def subsets(self, nums: List[int]) -&gt; List[List[int]]:</span><br><span class="line">        res &#x3D; [[]]</span><br><span class="line">        for i in nums:</span><br><span class="line">            # res[:]复制了一份副本</span><br><span class="line">            for subset in res[:]:</span><br><span class="line">                res.append(subset + [i])</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure></li></ul><p>回溯法：<br>和组合总和系列的题解法一样~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subsets</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">return</span> self.helper(nums, [], [])</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, nums, tmp, res)</span>:</span></span><br><span class="line">        res.append(copy.deepcopy(tmp))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            tmp.append(nums[i])</span><br><span class="line">            self.helper(nums[i+<span class="number">1</span>:], tmp, res)</span><br><span class="line">            tmp.pop()</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/subsets-ii/" target="_blank" rel="noopener">90. 子集 II</a><br>给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。</p><p>说明：解集不能包含重复的子集。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,2]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [2],</span><br><span class="line">  [1],</span><br><span class="line">  [1,2,2],</span><br><span class="line">  [2,2],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>回溯法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subsetsWithDup</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">return</span> self.helper(nums, [], [])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, nums, tmp, res)</span>:</span></span><br><span class="line">        res.append(copy.deepcopy(tmp))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            tmp.append(nums[i])</span><br><span class="line">            self.helper(nums[i+<span class="number">1</span>:], tmp, res)</span><br><span class="line">            tmp.pop()</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一天两道算法题(中等)(2)(Leetcode 216 77)</title>
      <link href="/2020/08/02/%E4%B8%80%E5%A4%A9%E4%B8%A4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98(%E4%B8%AD%E7%AD%89)(2)/"/>
      <url>/2020/08/02/%E4%B8%80%E5%A4%A9%E4%B8%A4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98(%E4%B8%AD%E7%AD%89)(2)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/combination-sum-iii/" target="_blank" rel="noopener">216. 组合总和 III</a><br>找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。</p><a id="more"></a><p>说明：</p><ul><li>所有数字都是正整数。</li><li>解集不能包含重复的组合。</li></ul><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: k &#x3D; 3, n &#x3D; 7</span><br><span class="line">输出: [[1,2,4]]</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: k &#x3D; 3, n &#x3D; 9</span><br><span class="line">输出: [[1,2,6], [1,3,5], [2,3,4]]</span><br></pre></td></tr></table></figure><ul><li>这道题和组合总和1、2差不多，只不过不再遍历数组，而是一个数字范围。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def combinationSum3(self, k: int, n: int) -&gt; List[List[int]]:</span><br><span class="line">        if k &#x3D;&#x3D; 0:</span><br><span class="line">            return []</span><br><span class="line">        return self.helper(1, [], [], k, n)</span><br><span class="line">    </span><br><span class="line">    def helper(self, num, tmp, res, k, n):</span><br><span class="line">        if k &#x3D;&#x3D; 0 and n &#x3D;&#x3D; 0:</span><br><span class="line">            res.append(copy.deepcopy(tmp))</span><br><span class="line">            return res</span><br><span class="line"></span><br><span class="line">        for i in range(num, 10):</span><br><span class="line">            if i &lt;&#x3D; n:</span><br><span class="line">                tmp.append(i)</span><br><span class="line">                self.helper(i+1, tmp, res, k-1, n - i)</span><br><span class="line">                tmp.pop()</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/combinations/" target="_blank" rel="noopener">77. 组合</a><br>给定两个整数 n 和 k，返回 1 … n 中所有可能的 k 个数的组合。<br>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入: n &#x3D; 4, k &#x3D; 2</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>相同思路<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def combine(self, n: int, k: int) -&gt; List[List[int]]:</span><br><span class="line">        if k &#x3D;&#x3D; 0:</span><br><span class="line">            return []</span><br><span class="line">        return self.helper(k, [], [], n, 1)</span><br><span class="line">    </span><br><span class="line">    def helper(self, k, tmp, res, n, i):</span><br><span class="line">        if len(tmp) &#x3D;&#x3D; k:</span><br><span class="line">            res.append(copy.deepcopy(tmp))</span><br><span class="line">            return res</span><br><span class="line">        for i in range(i, n+1):</span><br><span class="line">            if i &lt;&#x3D; n:</span><br><span class="line">                tmp.append(i)</span><br><span class="line">                self.helper(k, tmp, res, n, i+1)</span><br><span class="line">                tmp.pop()</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一天两道算法题(中等)(1)(Leetcode 39 40)</title>
      <link href="/2020/08/01/%E4%B8%80%E5%A4%A9%E4%B8%A4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98(%E4%B8%AD%E7%AD%89)(1)/"/>
      <url>/2020/08/01/%E4%B8%80%E5%A4%A9%E4%B8%A4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98(%E4%B8%AD%E7%AD%89)(1)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Backtracking(回溯算法)：<br>三步：</p><ul><li>设置现场</li><li>DFS（递归）</li><li>回复现场（恢复现场）<a id="more"></a></li></ul><p><a href="https://leetcode-cn.com/problems/combination-sum/" target="_blank" rel="noopener">39. 组合总和</a></p><p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p>candidates 中的数字可以无限制重复被选取。</p><p>说明：</p><ul><li>所有数字（包括 target）都是正整数。</li><li>解集不能包含重复的组合。 </li></ul><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：candidates &#x3D; [2,3,6,7], target &#x3D; 7,</span><br><span class="line">所求解集为：</span><br><span class="line">[</span><br><span class="line">  [7],</span><br><span class="line">  [2,2,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：candidates &#x3D; [2,3,5], target &#x3D; 8,</span><br><span class="line">所求解集为：</span><br><span class="line">[</span><br><span class="line">  [2,2,2,2],</span><br><span class="line">  [2,3,3],</span><br><span class="line">  [3,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><p>先实现这个递归，遍历给定的数组，如果遍历到当前元素比target大，直接遍历下一个元素，如果当前的元素值比target小或相等，那么就递归到下一层找第二个数</p></li><li><p>遍历给定的数组，如果当前元素&lt;=target，说明当前的元素有可能是结果中的一个，把当前这个元素放到临时的tmp列表中，然后遍历下一层</p></li><li><p>传递给下一层的值有candidates，因为需要继续遍历，但是传递给下一层的candidates不是完整的candidates，而是从当前元素开始的所有后面的candidates部分，因为如果遍历到3的时候，3为第一个元素，继续往下一层遍历是希望找到candidates3开始后面的元素是否有可能为结果的</p></li><li><p>传递给下一层的target要减去当前的candidates[i]，因为到下一层要判断target是否为0，如果为0说明当前的tmp就是一种结果，需要把tmp添加到res中</p></li><li><p>遍历后tmp需要pop掉这一层添加的节点是恢复现场，例如如果从头开始遍历，tmp为[]，target为7，遍历到第一层，tmp为[2],target为5，遍历到下一层,tmp为[2,2],target为3，继续下一层，tmp为[2,2,2],target为1，再遍历到下一层的时候第一个元素2已经大于target1了，所以直接返回，这时候返回到上一次，pop掉最后一个元素2,tmp变为[2,2]，当前的target为3，然后for循环遍历到3，因为3&lt;=target，所以tmp变为[2,2,3]，target传递给下一层为0，下一层会判断target为0，将tmp列表append到res中去</p></li><li><p>这里需要用到深拷贝，因为tmp在不断被修改，如果用浅拷贝，最后tmp会被修改为[]，这时候res中被append进的tmp也会变为[]</p></li><li><p>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def combinationSum(self, candidates: List[int], target: int) -&gt; List[List[int]]:</span><br><span class="line">        if not candidates:</span><br><span class="line">            return []</span><br><span class="line">        return self.helper(candidates, [], [], target)</span><br><span class="line"></span><br><span class="line">    def helper(self, candidates, tmp, res, target):</span><br><span class="line">        if target &#x3D;&#x3D; 0:</span><br><span class="line">            res.append(copy.deepcopy(tmp))</span><br><span class="line">            return res</span><br><span class="line"></span><br><span class="line">        for i in range(len(candidates)):</span><br><span class="line">            if candidates[i] &lt;&#x3D; target:</span><br><span class="line">                tmp.append(candidates[i])</span><br><span class="line">                self.helper(candidates[i:], tmp, res,target - candidates[i])</span><br><span class="line">                tmp.pop()</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://leetcode-cn.com/problems/combination-sum-ii/" target="_blank" rel="noopener">40. 组合总和 II</a></p><p>给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p>candidates 中的每个数字在每个组合中只能使用一次。</p><p>说明：</p><ul><li>所有数字（包括目标数）都是正整数。</li><li>解集不能包含重复的组合。 </li></ul><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates &#x3D; [10,1,2,7,6,1,5], target &#x3D; 8,</span><br><span class="line">所求解集为:</span><br><span class="line">[</span><br><span class="line">  [1, 7],</span><br><span class="line">  [1, 2, 5],</span><br><span class="line">  [2, 6],</span><br><span class="line">  [1, 1, 6]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates &#x3D; [2,5,2,1,2], target &#x3D; 5,</span><br><span class="line">所求解集为:</span><br><span class="line">[</span><br><span class="line">  [1,2,2],</span><br><span class="line">  [5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>和组合1的区别：<ul><li>一个是在向下传递的时候，因为不能用重复的数字，所以向下传递的candidates[i:]变为了candidates[i+1:]</li><li>另一个是遍历到当前层，如果当前的列表元素值和前一个元素值相等，那就不遍历当前元素的下一层了，因为所有的可能结果在遍历前一个相等元素的时候，都找过了。</li></ul></li><li>代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def combinationSum2(self, candidates: List[int], target: int) -&gt; List[List[int]]:</span><br><span class="line">        if not candidates:</span><br><span class="line">            return []</span><br><span class="line">        candidates.sort()</span><br><span class="line">        return self.helper(candidates, [], [], target)</span><br><span class="line">    </span><br><span class="line">    def helper(self, candidates, tmp, res, target):</span><br><span class="line">        if target &#x3D;&#x3D; 0:</span><br><span class="line">            res.append(copy.deepcopy(tmp))</span><br><span class="line">            return res</span><br><span class="line"></span><br><span class="line">        for i in range(len(candidates)):</span><br><span class="line">            if i &gt; 0 and candidates[i] &#x3D;&#x3D; candidates[i - 1]:</span><br><span class="line">                continue</span><br><span class="line">            if candidates[i] &lt;&#x3D; target:</span><br><span class="line">                tmp.append(candidates[i])</span><br><span class="line">                self.helper(candidates[i+1:], tmp, res, target-candidates[i])</span><br><span class="line">                tmp.pop()</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anki2.1插件推荐</title>
      <link href="/2020/06/01/Anki%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
      <url>/2020/06/01/Anki%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="插件首页"><a href="#插件首页" class="headerlink" title="插件首页"></a>插件首页</h4><p><a href="https://ankiweb.net/shared/addons/2.1" target="_blank" rel="noopener">https://ankiweb.net/shared/addons/2.1</a></p><a id="more"></a><h4 id="插件1-ReviewHeatmap"><a href="#插件1-ReviewHeatmap" class="headerlink" title="插件1 ReviewHeatmap"></a>插件1 ReviewHeatmap</h4><p>下载地址：<a href="https://ankiweb.net/shared/info/723520343" target="_blank" rel="noopener">https://ankiweb.net/shared/info/723520343</a></p><p>插件代码：<code>723520343</code></p><p>展示：</p><p><a href="https://sm.ms/image/3saKlzvUqSm4nWM" target="_blank"><img src="https://i.loli.net/2020/06/01/3saKlzvUqSm4nWM.png" ></a></p><p>说明：</p><p>用颜色的深浅表示当天看了多少卡片，右上角的<a href="https://sm.ms/image/zfVOi4hNlQCRwWI" target="_blank"><img src="https://i.loli.net/2020/06/01/zfVOi4hNlQCRwWI.png" ></a>可以设置颜色和其他。</p><h4 id="插件2-AwesomeTTS-for-Anki-2-1"><a href="#插件2-AwesomeTTS-for-Anki-2-1" class="headerlink" title="插件2 AwesomeTTS for Anki 2.1"></a>插件2 AwesomeTTS for Anki 2.1</h4><p>下载地址：<a href="https://ankiweb.net/shared/info/814349176" target="_blank" rel="noopener">https://ankiweb.net/shared/info/814349176</a></p><p>插件代码：<code>814349176</code></p><p>展示：</p><p><a href="https://sm.ms/image/dVNBfrasg548Tw2" target="_blank"><img src="https://i.loli.net/2020/06/01/dVNBfrasg548Tw2.png" ></a></p><p><a href="https://sm.ms/image/pCU97jsxfHh2ImB" target="_blank"><img src="https://i.loli.net/2020/06/01/pCU97jsxfHh2ImB.png" ></a></p><p>说明：</p><p>可以插入单词读音。</p><h4 id="插件3-Large-and-Colorful-Buttons"><a href="#插件3-Large-and-Colorful-Buttons" class="headerlink" title="插件3 Large and Colorful Buttons"></a>插件3 Large and Colorful Buttons</h4><p>下载地址：<a href="https://ankiweb.net/shared/info/1829090218" target="_blank" rel="noopener">https://ankiweb.net/shared/info/1829090218</a></p><p>插件代码：<code>1829090218</code></p><p>展示：</p><p><a href="https://sm.ms/image/zkywZmdacTuSsX3" target="_blank"><img src="https://i.loli.net/2020/06/01/zkywZmdacTuSsX3.png" ></a></p><p><a href="https://sm.ms/image/g7C4cXdhqem63f8" target="_blank"><img src="https://i.loli.net/2020/06/01/g7C4cXdhqem63f8.png" ></a></p><p>说明：</p><p>比较大的按键。</p><h4 id="插件4-Colorful-toolbars"><a href="#插件4-Colorful-toolbars" class="headerlink" title="插件4 Colorful toolbars"></a>插件4 Colorful toolbars</h4><p>下载地址：<a href="https://ankiweb.net/shared/info/388296573" target="_blank" rel="noopener">https://ankiweb.net/shared/info/388296573</a></p><p>插件代码：<code>388296573</code></p><p>展示：</p><p><a href="https://sm.ms/image/qGRm8kcKh79lg3b" target="_blank"><img src="https://i.loli.net/2020/06/01/qGRm8kcKh79lg3b.png" ></a></p><p>说明：</p><p>把首页文字的按键变成了图标。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Github访问慢的方法</title>
      <link href="/2020/05/14/%E8%A7%A3%E5%86%B3Github%E8%AE%BF%E9%97%AE%E6%85%A2%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2020/05/14/%E8%A7%A3%E5%86%B3Github%E8%AE%BF%E9%97%AE%E6%85%A2%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="1-使用浏览器访问https-www-ipaddress-com-。"><a href="#1-使用浏览器访问https-www-ipaddress-com-。" class="headerlink" title="1.使用浏览器访问https://www.ipaddress.com/。"></a>1.使用浏览器访问<a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com/</a>。</h5><p>在这个位置分别输入github.com和github.global.ssl.fastly.net<br><a href="https://sm.ms/image/iE9AqQkXPVe7Lud" target="_blank"><img src="https://i.loli.net/2020/05/23/iE9AqQkXPVe7Lud.png" ></a></p><a id="more"></a><p><a href="https://sm.ms/image/Zq9cnGJBEyl2gKF" target="_blank"><img src="https://i.loli.net/2020/05/23/Zq9cnGJBEyl2gKF.png" ></a><br>搜索一下~<br>找到github.com对应的ip：<br><a href="https://sm.ms/image/4WlHben3hzaARGq" target="_blank"><img src="https://i.loli.net/2020/05/23/4WlHben3hzaARGq.png" ></a></p><p>找到github.global.ssl.fastly.net对应的ip：<br><a href="https://sm.ms/image/oL7bgRMtOumI9fF" target="_blank"><img src="https://i.loli.net/2020/05/23/oL7bgRMtOumI9fF.png" ></a></p><p>每台电脑获取的ip应该不一样。<br>我获取的是<code>140.82.112.3</code>和<code>199.232.69.194</code>。</p><h5 id="2-Windows系统打开以下目录："><a href="#2-Windows系统打开以下目录：" class="headerlink" title="2.Windows系统打开以下目录："></a>2.Windows系统打开以下目录：</h5><p><code>C:\Windows\System32\drivers\etc</code><br>用记事本打开host文件，把以下内容添加进去：</p><blockquote><p>140.82.112.3   github.com<br>199.232.69.194 github.global.ssl.fastly.Net</p></blockquote><p><a href="https://sm.ms/image/gMLqcuQ6eVv8TlH" target="_blank"><img src="https://i.loli.net/2020/05/23/gMLqcuQ6eVv8TlH.png" ></a><br>保存、关闭。</p><h5 id="3-打开cmd"><a href="#3-打开cmd" class="headerlink" title="3.打开cmd"></a>3.打开cmd</h5><p>用windows+R打开：<br><a href="https://sm.ms/image/GimRw97Yl2Vbj5d" target="_blank"><img src="https://i.loli.net/2020/05/23/GimRw97Yl2Vbj5d.png" ></a><br>输入cmd，回车。<br>在小黑框里输入<code>ipconfig /flushdns</code>，更新DNS缓存。<br><a href="https://sm.ms/image/ezkd2uAmtfCRnGQ" target="_blank"><img src="https://i.loli.net/2020/05/23/ezkd2uAmtfCRnGQ.png" ></a></p><h5 id="4-再次访问Github"><a href="#4-再次访问Github" class="headerlink" title="4.再次访问Github"></a>4.再次访问Github</h5><p>快多啦！</p>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>置顶</title>
      <link href="/2020/05/09/%E7%BD%AE%E9%A1%B6/"/>
      <url>/2020/05/09/%E7%BD%AE%E9%A1%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>博客搬迁中。。。<br>源地址：<a href="https://www.jianshu.com/u/400aba58cff5" target="_blank" rel="noopener">https://www.jianshu.com/u/400aba58cff5</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++运算符重载实现(加号、左移、递增、赋值、关系运算符、函数调用)</title>
      <link href="/2020/05/06/C++%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%E5%AE%9E%E7%8E%B0(%E5%8A%A0%E5%8F%B7%E3%80%81%E5%B7%A6%E7%A7%BB%E3%80%81%E9%80%92%E5%A2%9E%E3%80%81%E8%B5%8B%E5%80%BC%E3%80%81%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8)/"/>
      <url>/2020/05/06/C++%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%E5%AE%9E%E7%8E%B0(%E5%8A%A0%E5%8F%B7%E3%80%81%E5%B7%A6%E7%A7%BB%E3%80%81%E9%80%92%E5%A2%9E%E3%80%81%E8%B5%8B%E5%80%BC%E3%80%81%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>先来复习一下C++的内存分区问题~</p><a id="more"></a><h2 id="C-内存分区"><a href="#C-内存分区" class="headerlink" title="C++内存分区"></a>C++内存分区</h2><p>C++程序的内存分区可划分为四大内存分区：堆、栈、全局/静态存储区和代码区。 不同类型的变量存放的区域不同。</p><p><strong>在程序被编译为exe可执行文件后，未运行之前，分为两个区域：代码区和全局区。</strong></p><h3 id="代码区"><a href="#代码区" class="headerlink" title="代码区"></a>代码区</h3><p>存放程序体的二进制代码。比如我们写的函数，都是在代码区的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int a &#x3D; 0;&#x2F;&#x2F;静态全局变量区</span><br><span class="line">char *p1; &#x2F;&#x2F;编译器默认初始化为NULL</span><br><span class="line">void main()&#123;    </span><br><span class="line">        int b; &#x2F;&#x2F;栈    </span><br><span class="line">        char s[] &#x3D; &quot;abc&quot;;&#x2F;&#x2F;栈    </span><br><span class="line">        char *p2 &#x3D; &quot;123456&quot;;&#x2F;&#x2F;123456在字符串常量区，p2在栈上    </span><br><span class="line">        static int c &#x3D;0; &#x2F;&#x2F;c在静态变量区，0为文字常量，在代码区    </span><br><span class="line">        const int d&#x3D;0; &#x2F;&#x2F;栈    </span><br><span class="line">        static const int d;&#x2F;&#x2F;静态常量区    </span><br><span class="line">        p1 &#x3D; (char *)malloc(10);&#x2F;&#x2F;分配得来得10字节在堆区。    </span><br><span class="line">        strcpy(p1, &quot;123456&quot;); &#x2F;&#x2F;123456放在字符串常量区，编译器可能会将它与p2所指向的&quot;123456&quot;优化成一个地方</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>以上所有代码，编译成二进制后存放于代码区，文字常量存放于代码区，是不可寻址的。</p><h3 id="全局区"><a href="#全局区" class="headerlink" title="全局区"></a>全局区</h3><p>全局区存储<strong>全局变量</strong>，<strong>静态变量</strong>，还包括了<strong>常量区</strong>，字符串常量和其他常量（const修饰的<strong>全局变量</strong>）也存放在全局区。<br>全局区的数据在程序结束后由操作系统释放。</p><p><strong>程序运行之后</strong></p><h3 id="栈区"><a href="#栈区" class="headerlink" title="栈区"></a>栈区</h3><p>由编译器自动释放，存放函数的参数值，局部变量等。<br>整个程序的栈区的大小可以在编译器中由用户自行设定。</p><p>注意：不要返回局部变量地址。</p><h3 id="堆区"><a href="#堆区" class="headerlink" title="堆区"></a>堆区</h3><p>由编程人员手动申请，手动释放，若不手动释放，程序结束后由系统回收，生命周期是整个程序运行期间。<br>使用new进行堆的申请，堆的总大小为机器的虚拟内存的大小。new返回的是该数据类型的指针。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int * p &#x3D; new int(10);</span><br></pre></td></tr></table></figure><p>使用delete进行释放。</p><h3 id="重载方式有两种："><a href="#重载方式有两种：" class="headerlink" title="重载方式有两种："></a>重载方式有两种：</h3><p><strong>1.重载的函数作为成员函数。<br>2.重载的函数作为全局函数</strong><br>函数名是规定的：operator+</p><h2 id="加号运算符（“-”）重载"><a href="#加号运算符（“-”）重载" class="headerlink" title="加号运算符（“+”）重载"></a>加号运算符（“+”）重载</h2><p>对于内置的数据类型，编译器知道如何进行运算。<br>两个自定义的数据类型，进行相加，就需要进行加号运算符重载。</p><p><strong>成员函数实现加号重载：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">public:</span><br><span class="line">    Person operator+(Person &amp;p)&#123;</span><br><span class="line">        Person tmp;</span><br><span class="line">        tmp.a &#x3D; this-&gt;a + p.a;</span><br><span class="line">        tmp.b &#x3D; this-&gt;b + p.b;</span><br><span class="line">        return tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    int a;</span><br><span class="line">    int b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    Person A;</span><br><span class="line">    A.a &#x3D; 10;</span><br><span class="line">    A.b &#x3D; 20;</span><br><span class="line">    </span><br><span class="line">    Person B;</span><br><span class="line">    B.a &#x3D; 1;</span><br><span class="line">    B.b &#x3D; 3;</span><br><span class="line">    </span><br><span class="line">    Person C;</span><br><span class="line">    C &#x3D; A + B;</span><br><span class="line">    cout &lt;&lt; C.a &lt;&lt; &quot;  &quot; &lt;&lt; C.b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://upload-images.jianshu.io/upload_images/14394806-62d12b2b2cb500c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>全局函数实现加号重载：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">public:</span><br><span class="line">    int a;</span><br><span class="line">    int b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Person operator+(Person &amp;p1,Person &amp;p2)&#123;    &#x2F;&#x2F;需要传入两个参数</span><br><span class="line">    Person tmp;</span><br><span class="line">    tmp.a &#x3D; p1.a + p2.a;</span><br><span class="line">    tmp.b &#x3D; p1.b + p2.b;</span><br><span class="line">    return tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    Person A;</span><br><span class="line">    A.a &#x3D; 10;</span><br><span class="line">    A.b &#x3D; 20;</span><br><span class="line"></span><br><span class="line">    Person B;</span><br><span class="line">    B.a &#x3D; 1;</span><br><span class="line">    B.b &#x3D; 3;</span><br><span class="line"></span><br><span class="line">    Person C;</span><br><span class="line">    C &#x3D; A + B;</span><br><span class="line">    cout &lt;&lt; C.a &lt;&lt; &quot;  &quot; &lt;&lt; C.b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://upload-images.jianshu.io/upload_images/14394806-af5bd742104fdf19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>运算符重载也可以发生函数重载</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">public:</span><br><span class="line">    int a;</span><br><span class="line">    int b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Person operator+(Person &amp;p1,Person &amp;p2)&#123;</span><br><span class="line">    Person tmp;</span><br><span class="line">    tmp.a &#x3D; p1.a + p2.a;</span><br><span class="line">    tmp.b &#x3D; p1.b + p2.b;</span><br><span class="line">    return tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person operator+(Person &amp;p1,int n)&#123;  &#x2F;&#x2F;函数重载</span><br><span class="line">    Person tmp;</span><br><span class="line">    tmp.a &#x3D; p1.a + n;</span><br><span class="line">    tmp.b &#x3D; p1.b + n;</span><br><span class="line">    return tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    Person A;</span><br><span class="line">    A.a &#x3D; 10;</span><br><span class="line">    A.b &#x3D; 20;</span><br><span class="line"></span><br><span class="line">    Person B;</span><br><span class="line">    B.a &#x3D; 1;</span><br><span class="line">    B.b &#x3D; 3;</span><br><span class="line"></span><br><span class="line">    Person C;</span><br><span class="line">    C &#x3D; A + B;</span><br><span class="line">    cout &lt;&lt; C.a &lt;&lt; &quot;  &quot; &lt;&lt; C.b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Person D;</span><br><span class="line">    D &#x3D; A + 10;</span><br><span class="line">    cout &lt;&lt; D.a &lt;&lt; &quot;  &quot; &lt;&lt; D.b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:<br><img src="https://upload-images.jianshu.io/upload_images/14394806-0127a16462d014dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="左移运算符（“-lt-lt-”）符重载"><a href="#左移运算符（“-lt-lt-”）符重载" class="headerlink" title="左移运算符（“&lt;&lt;”）符重载"></a>左移运算符（“&lt;&lt;”）符重载</h2><p>可以输出自定义的数据类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    int a;</span><br><span class="line">    int b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; operator&lt;&lt;(ostream &amp;cout , Person &amp;p)&#123;</span><br><span class="line">    cout &lt;&lt; p.a &lt;&lt; &quot;   &quot; &lt;&lt; p.b &lt;&lt; endl;</span><br><span class="line">    return cout;   &#x2F;&#x2F;返回cout 可以实现链式编程</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    Person A;</span><br><span class="line">    A.a &#x3D; 10;</span><br><span class="line">    A.b &#x3D; 20;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://upload-images.jianshu.io/upload_images/14394806-4628490bad8f3ffb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>左移运算符重载无法用成员函数来实现</strong><br>因为要实现的是<code>cout &lt;&lt; A &lt;&lt; endl;</code>看例子吧~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">class Person&#123;</span><br><span class="line">public:</span><br><span class="line">    int a;</span><br><span class="line">    int b;</span><br><span class="line"></span><br><span class="line">    ostream&amp; operator&lt;&lt;(ostream &amp;cout)&#123;</span><br><span class="line">        cout &lt;&lt; this-&gt;a &lt;&lt; &quot;   &quot; &lt;&lt; this-&gt;b &lt;&lt; endl;</span><br><span class="line">        return cout;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    Person A;</span><br><span class="line">    A.a &#x3D; 10;</span><br><span class="line">    A.b &#x3D; 20;</span><br><span class="line"></span><br><span class="line">    A &lt;&lt; cout &lt;&lt; endl; &#x2F;&#x2F;如果用成员函数，最后实现了是这样的。。。(因为是A调用，所以A写在前)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://upload-images.jianshu.io/upload_images/14394806-303c955528a2b9b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="递增运算符（“-”）重载"><a href="#递增运算符（“-”）重载" class="headerlink" title="递增运算符（“++”）重载"></a>递增运算符（“++”）重载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    int a;</span><br><span class="line">    int b;</span><br><span class="line">    Person&amp; operator++()&#123;   &#x2F;&#x2F;前置递增返回的是引用，这样++(++A)也不会出错</span><br><span class="line">        a++;</span><br><span class="line">        b++;</span><br><span class="line">        return *this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;后置递增返回的是值</span><br><span class="line">    Person operator++(int)&#123;    &#x2F;&#x2F;int是占位参数，可以用来区分前置和后置，必须写int，其他类型不可以</span><br><span class="line">        Person tmp &#x3D; *this;</span><br><span class="line">        a++;</span><br><span class="line">        b++;</span><br><span class="line">        return tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; operator&lt;&lt;(ostream &amp;cout , Person &amp;p)&#123;</span><br><span class="line">    cout &lt;&lt; p.a &lt;&lt; &quot;   &quot; &lt;&lt; p.b &lt;&lt; endl;</span><br><span class="line">    return cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    Person A;</span><br><span class="line">    A.a &#x3D; 10;</span><br><span class="line">    A.b &#x3D; 20;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; &quot;原始A的值：&quot; &lt;&lt;A &lt;&lt; endl;</span><br><span class="line">    ++A;</span><br><span class="line">    cout &lt;&lt; &quot;A++后的值：&quot; &lt;&lt; A &lt;&lt; endl;</span><br><span class="line">    A++;</span><br><span class="line">    cout &lt;&lt; &quot;A++后的值：&quot; &lt;&lt; A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://upload-images.jianshu.io/upload_images/14394806-3aea18e121949e06.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="赋值运算符（“-”）重载"><a href="#赋值运算符（“-”）重载" class="headerlink" title="赋值运算符（“=”）重载"></a>赋值运算符（“=”）重载</h2><p>存在复制运算符的原因是<strong>堆区的数据重复释放，也就是浅拷贝的问题。</strong><br>详细解释：<br><img src="https://upload-images.jianshu.io/upload_images/14394806-f8b7fcff439906dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>在对象P1中new一个age变量，这个遍历被存储在堆区，需要程序员手动申请，手动释放，把P1赋给p2时，P2也指向这个堆区的地址空间，所以当使用析构函数对堆区数据进行释放时，P1释放了一次，P2又释放了一次，出现了堆区数据重复释放的情况，程序崩溃。</p><p>解决方案：<br>利用深拷贝来解决浅拷贝的问题。<br>因为出现程序崩溃的主要原因是，当p2 = p1时，p2直接指向了0x0011这块地址，使用赋值运算符重载，使p2 = p1时，p2开辟一个新的地址空间用来存储年龄18这个数据，这样在释放时，就不会重复释放了。<br><img src="https://upload-images.jianshu.io/upload_images/14394806-93ebad4d9de212b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">public:</span><br><span class="line">    Person(int age) &#123;</span><br><span class="line">        this-&gt;age &#x3D; new int(age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int *age;</span><br><span class="line"></span><br><span class="line">    ~Person() &#123;</span><br><span class="line">        if (age !&#x3D; NULL) &#123;</span><br><span class="line">            delete age;</span><br><span class="line">            age &#x3D; NULL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Person &amp;operator&#x3D;(Person &amp;p) &#123;  &#x2F;&#x2F;返回类型是Person，可以链式赋值，p3 &#x3D; p2 &#x3D; p1</span><br><span class="line">        if (this-&gt;age !&#x3D; NULL) &#123;</span><br><span class="line">            delete age;</span><br><span class="line">            age &#x3D; NULL;</span><br><span class="line">        &#125;</span><br><span class="line">        age &#x3D; new int(*p.age);</span><br><span class="line">        return *this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Person p1(10);</span><br><span class="line">    cout &lt;&lt; *p1.age &lt;&lt; endl;  &#x2F;&#x2F;p1.age是指针</span><br><span class="line"></span><br><span class="line">    Person p2(18);</span><br><span class="line">    cout &lt;&lt; *p2.age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    p2 &#x3D; p1;</span><br><span class="line">    cout &lt;&lt; *p2.age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Person p3(20);</span><br><span class="line">    cout &lt;&lt; *p3.age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    p1 &#x3D; p2 &#x3D; p3;</span><br><span class="line">    cout &lt;&lt; *p1.age &lt;&lt; &quot;  &quot; &lt;&lt; *p2.age &lt;&lt; &quot;  &quot; &lt;&lt; *p3.age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://upload-images.jianshu.io/upload_images/14394806-bd63316cce09ae8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="关系运算符重载"><a href="#关系运算符重载" class="headerlink" title="关系运算符重载"></a>关系运算符重载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public:</span><br><span class="line">    Person(string name, int age,int sex) &#123;</span><br><span class="line">        this-&gt;name &#x3D; name;</span><br><span class="line">        this-&gt;age &#x3D; age;</span><br><span class="line">        this-&gt;sex &#x3D; sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string name;</span><br><span class="line">    int age;</span><br><span class="line">    int sex;</span><br><span class="line"></span><br><span class="line">    bool operator&#x3D;&#x3D;(Person &amp;p)&#123;</span><br><span class="line">        return this-&gt;name &#x3D;&#x3D; p.name &amp;&amp; this-&gt;age &#x3D;&#x3D; p.age &amp;&amp; this-&gt;sex &#x3D;&#x3D; p.sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool operator!&#x3D;(Person &amp;p)&#123;</span><br><span class="line">        return !(this-&gt;name &#x3D;&#x3D; p.name &amp;&amp; this-&gt;age &#x3D;&#x3D; p.age &amp;&amp; this-&gt;sex &#x3D;&#x3D; p.sex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Person p1(&quot;Tom&quot;,23,1);</span><br><span class="line">    Person p2(&quot;Tom&quot;,23,1);</span><br><span class="line">    Person p3(&quot;Amy&quot;,23,2);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; (p1 &#x3D;&#x3D; p2 ? &quot;相等&quot; : &quot;不相等&quot;)&lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; (p2 &#x3D;&#x3D; p3 ? &quot;相等&quot; : &quot;不相等&quot;)&lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; (p1 !&#x3D; p2 ? &quot;不相等&quot; : &quot;相等&quot;)&lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; (p2 !&#x3D; p3 ? &quot;不相等&quot; : &quot;相等&quot;)&lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://upload-images.jianshu.io/upload_images/14394806-a610813d8ad667ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="函数调用运算符重载"><a href="#函数调用运算符重载" class="headerlink" title="函数调用运算符重载"></a>函数调用运算符重载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    void operator()(int b) &#123;</span><br><span class="line">        cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    p1.operator()(6);</span><br><span class="line">    &#x2F;&#x2F; 匿名函数对象</span><br><span class="line">    Person()(9);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://upload-images.jianshu.io/upload_images/14394806-be5f7f656a9ae3ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><a href="https://www.runoob.com/cplusplus/cpp-overloading.html" target="_blank" rel="noopener">菜鸟教程的C++ 重载运算符和重载函数</a></p><p>补充：<br><img src="https://upload-images.jianshu.io/upload_images/14394806-175cac10f0f9b23a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python实现排序及时间空间复杂度分析</title>
      <link href="/2020/03/11/Python%E5%AE%9E%E7%8E%B0%E6%8E%92%E5%BA%8F%E5%8F%8A%E6%97%B6%E9%97%B4%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"/>
      <url>/2020/03/11/Python%E5%AE%9E%E7%8E%B0%E6%8E%92%E5%BA%8F%E5%8F%8A%E6%97%B6%E9%97%B4%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>原文链接：<a href="https://www.jianshu.com/p/e398e4c3bb05" target="_blank" rel="noopener">https://www.jianshu.com/p/e398e4c3bb05</a></p><h3 id="一、冒泡排序（Bubble-Sort）"><a href="#一、冒泡排序（Bubble-Sort）" class="headerlink" title="一、冒泡排序（Bubble Sort）"></a>一、冒泡排序（Bubble Sort）</h3><p><strong>原理：</strong></p><blockquote><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。（从头到尾，从尾到头都可以）</li><li>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol></blockquote><a id="more"></a><p><strong>动画：</strong><br><img src="https://upload-images.jianshu.io/upload_images/14394806-aa55d641f1b54cae.gif?imageMogr2/auto-orient/strip" alt="冒泡排序.gif"></p><p><strong>图片说明第一次排序：</strong><br><a href="https://sm.ms/image/IAqEgzh2QuLlFDi" target="_blank"><img src="https://i.loli.net/2020/05/13/IAqEgzh2QuLlFDi.png" ></a><br><strong>图片说明所有排序：</strong><br><a href="https://sm.ms/image/JN4Emb9UAcu8wfe" target="_blank"><img src="https://i.loli.net/2020/05/13/JN4Emb9UAcu8wfe.png" ></a></p><p><strong>Python实现：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def BubbleSort(matrix):</span><br><span class="line">    for i in range(len(matrix) - 1):</span><br><span class="line">        for j in range(len(matrix)-i-1):#要用到j+1，防止溢出，减掉1</span><br><span class="line">            if matrix[j] &gt; matrix[j + 1]:</span><br><span class="line">                matrix[j], matrix[j + 1] &#x3D; matrix[j + 1], matrix[j]</span><br><span class="line">    return matrixB</span><br></pre></td></tr></table></figure><p>从左到右找到依次找到较大的元素，如果左边的元素比右边的元素大，交换这两个元素。一共循环了len（matrix）-1次。</p><p><strong>优化:</strong><br>如果一个已经排好的数组，用这个算法还是要比较很多次。<br>所以增加一个flag，赋值为True，在一次循环中，如果没有两个元素进行交换，说明数组是已经排好序的，在当前循环结束时，flag的值没有发生改变依旧为True，可直接break出循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def BubbleSort(matrix):</span><br><span class="line">    flag &#x3D; True</span><br><span class="line">    for i in range(len(matrix) - 1):</span><br><span class="line">        for j in range(len(matrix) - i - 1):</span><br><span class="line">            if matrix[j] &gt; matrix[j + 1]:</span><br><span class="line">                matrix[j], matrix[j + 1] &#x3D; matrix[j + 1], matrix[j]</span><br><span class="line">                flag &#x3D; False</span><br><span class="line">        if (flag): break</span><br><span class="line">    return matrix</span><br></pre></td></tr></table></figure><p><strong>时间复杂度分析：</strong><br>外层的for时间复杂度为O（n）<br>里层的时间复杂度分析如下：<br>因为里层的起点是0，结束是len（matrix）-i-1，（以下用n代替len（matrix））当i == 0 时，里层循环是n-1次，i == 1时，循环为n-1次，当i == n-1时，需要0次。把i为（0，n-1）时所有的循环次数加起来就是从0加到n-1，值为首项加尾项乘以项数除以二，即（0+n-1）n/2，这个的时间复杂度我O（n）。所有里层的循环时间复杂度为O（n）。<br>所以时间复杂度为O（n^2）</p><p>最差情况是需要交换n^2次，最好情况是不需要交换。</p><p><strong>空间复杂度：</strong><br>不需要额外的空间。所以O（1）</p><p><strong>稳定性：</strong><br>冒泡排序是一个稳定的排序方式，比如matrix = [25, 25, 3, 9, 23, 44, 29]时，出现了两个25，在冒泡排序结束后，从左边数的第一个25，在排序结束时，依旧是从左数的第一个25，它不会出现在第二个25的右面。（因为在元素相等的时候没有进行交换）</p><h3 id="二、选择排序（Selction-Sort）"><a href="#二、选择排序（Selction-Sort）" class="headerlink" title="二、选择排序（Selction Sort）"></a>二、选择排序（Selction Sort）</h3><p><strong>原理：</strong><br>第一次循环找出最大值（最小值），记录其下标，把他与最末尾（首）的元素交换，第二次找到第二大的，与倒数第二末尾的元素进行交换。第一次循环的范围是（0，数组长度-1），第二次是（0，数组长度-2）<br><strong>动画：</strong><br><a href="https://sm.ms/image/yeRKXDvaJmu9VAg" target="_blank"><img src="https://i.loli.net/2020/05/13/yeRKXDvaJmu9VAg.gif" ></a><br><strong>图片说明：</strong><br><a href="https://sm.ms/image/CGUhsI9xzw5tr8a" target="_blank"><img src="https://i.loli.net/2020/05/13/CGUhsI9xzw5tr8a.png" ></a><br><strong>Python实现：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def SelectionSort(matrix):</span><br><span class="line">    n &#x3D; len(matrix)</span><br><span class="line">    for i in range(n):</span><br><span class="line">        index &#x3D; 0</span><br><span class="line">        for j in range(n - i):</span><br><span class="line">            if matrix[j] &gt; matrix[index]:</span><br><span class="line">                index &#x3D; j</span><br><span class="line">        matrix[n - i - 1], matrix[index] &#x3D; matrix[index], matrix[n - i - 1]</span><br><span class="line"></span><br><span class="line">    return matrix</span><br></pre></td></tr></table></figure><p><strong>时间复杂度分析：</strong><br>两次for循环：O（n^2），进行了O（n）次交换。</p><p><strong>空间复杂度：</strong><br>不需要额外的空间。所以O（1）</p><p><strong>稳定性：</strong><br>不稳定。</p><h3 id="三、插入排序（Insert-Sort）"><a href="#三、插入排序（Insert-Sort）" class="headerlink" title="三、插入排序（Insert Sort）"></a>三、插入排序（Insert Sort）</h3><p><strong>原理：</strong><br>相当于打牌时候摸牌，如数组[25, 5, 3, 9, 23, 44, 29]，第一张摸到的牌是25，第二张摸到了5，与25比较大小，放在25前面，依次摸完所有的牌，也就排序结束了。<br><strong>动画：</strong><br><img src="https://upload-images.jianshu.io/upload_images/14394806-a3b44d750da1da31.gif?imageMogr2/auto-orient/strip" alt="插入排序.gif"><br><strong>图片说明：</strong><br><a href="https://sm.ms/image/wyZOnIkQp7KM5Hi" target="_blank"><img src="https://i.loli.net/2020/05/13/wyZOnIkQp7KM5Hi.png" ></a><br><strong>Python实现：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def InsertSort(matrix):</span><br><span class="line">    n &#x3D; len(matrix)</span><br><span class="line">    for i in range(1, n):</span><br><span class="line">        cur &#x3D; i</span><br><span class="line">        pre &#x3D; cur - 1</span><br><span class="line">        while pre &gt;&#x3D; 0 and matrix[cur] &lt; matrix[pre]:</span><br><span class="line">            if matrix[cur] &lt; matrix[pre]:</span><br><span class="line">                matrix[pre], matrix[cur] &#x3D; matrix[cur], matrix[pre]</span><br><span class="line">                cur &#x3D; pre</span><br><span class="line">                pre &#x3D; cur - 1</span><br><span class="line"></span><br><span class="line">    return matrix</span><br></pre></td></tr></table></figure><p>定义一个cur来存储当前的下标，因为pre是cir-1，所以循环从1开始。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def InsertSort(matrix):</span><br><span class="line">    n &#x3D; len(matrix)</span><br><span class="line">    for i in range(1, n):</span><br><span class="line">        cur &#x3D; i</span><br><span class="line">        while cur - 1 &gt;&#x3D; 0 and matrix[cur] &lt; matrix[cur - 1]:</span><br><span class="line">            if matrix[cur] &lt; matrix[cur - 1]:</span><br><span class="line">                matrix[cur - 1], matrix[cur] &#x3D; matrix[cur], matrix[cur - 1]</span><br><span class="line">                cur -&#x3D; 1</span><br><span class="line"></span><br><span class="line">    return matrix</span><br></pre></td></tr></table></figure><p>把pre用cur-1代替了。</p><p>也可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def InsertSort(matrix):</span><br><span class="line">    for i in range(1, len(matrix)):</span><br><span class="line">        tmp &#x3D; i</span><br><span class="line">        while i &gt; 0:</span><br><span class="line">            if matrix[i] &lt; matrix[i - 1]:</span><br><span class="line">                matrix[i], matrix[i - 1] &#x3D; matrix[i - 1], matrix[i]</span><br><span class="line">                i -&#x3D; 1</span><br><span class="line">            else:</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">    return matrix</span><br></pre></td></tr></table></figure><p><strong>时间复杂度分析：</strong><br>两个嵌套的循环，时间复杂度是O(n^2)。<br>虽然时间复杂度也是O(n^2)，但是第二层循环不需要与所有元素进行比较，所以在性能上优于冒泡排序和选择排序。<br><strong>空间复杂度：</strong><br>没有额外的存储空间，是原地排序算法O（1）。<br><strong>稳定性：</strong><br>稳定</p><h3 id="四、希尔排序（Shell-Sort）"><a href="#四、希尔排序（Shell-Sort）" class="headerlink" title="四、希尔排序（Shell Sort）"></a>四、希尔排序（Shell Sort）</h3><p><strong>原理：</strong><br>实际上是插入排序的扩展，把数组分成几组，比如数组[25, 5, 3, 9, 23, 44, 29]，数组长度n为7，取gap = n/2，把数组的[i]和[i+gap]作为一组，比较[i]和[i+gap]的大小，如果[i]&gt;[i+gap]，交换[i]和[i+gap]，如果[i]&lt;[i+gap]，则继续比较[i+1]和[i+gap+1]，把数组里的所有元素都比较完之后，再把gap的值减小，可以减1，也可以把gap/2，继续比较，直至最后一次把数组中的所有元素作为一个整体排序。<br><strong>动画：</strong><br><a href="https://sm.ms/image/6SuXYNJ4EMG1Ir8" target="_blank"><img src="https://i.loli.net/2020/05/13/6SuXYNJ4EMG1Ir8.gif" ></a><br><strong>图片说明：</strong><br><a href="https://sm.ms/image/rqgaeJCc8LsX7Ux" target="_blank"><img src="https://i.loli.net/2020/05/13/rqgaeJCc8LsX7Ux.png" ></a><br><strong>Python实现：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def ShellSort(matrix):</span><br><span class="line">    n &#x3D; len(matrix)</span><br><span class="line">    gap &#x3D; n &#x2F;&#x2F; 2</span><br><span class="line">    while gap &gt; 0:</span><br><span class="line">        for i in range(gap, n):</span><br><span class="line">            for tmp in range(i, gap - 1, -gap):</span><br><span class="line">                if matrix[tmp] &lt; matrix[tmp - gap]:</span><br><span class="line">                    matrix[tmp], matrix[tmp - gap] &#x3D; matrix[tmp - gap], matrix[tmp]</span><br><span class="line"></span><br><span class="line">        if gap &#x3D;&#x3D; 2:</span><br><span class="line">            gap &#x3D; 1</span><br><span class="line">        else:</span><br><span class="line">            gap &#x2F;&#x2F;&#x3D; 2</span><br><span class="line">    return matrix</span><br></pre></td></tr></table></figure><h3 id="五、计数排序（Count-Sort）"><a href="#五、计数排序（Count-Sort）" class="headerlink" title="五、计数排序（Count Sort）"></a>五、计数排序（Count Sort）</h3><p><strong>使用范围：</strong><br>数组长度有限，较小。<br>出现的重复数字比较多，并且这些数值较为集中。<br><strong>原理：</strong><br>抽屉原理：遍历数组，把相同的值都放到同一个抽屉中，遍历结束后，按照值从小到大的顺序依次取出，即排列完成。<br><strong>动画：</strong><br><a href="https://sm.ms/image/Wb56MzNnDymO47p" target="_blank"><img src="https://i.loli.net/2020/05/13/Wb56MzNnDymO47p.gif" ></a></p><p><strong>图片说明：</strong><br><a href="https://sm.ms/image/Vkb5gqyeEi1XIpU" target="_blank"><img src="https://i.loli.net/2020/05/13/Vkb5gqyeEi1XIpU.png" ></a></p><p><strong>Python实现：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def CountSort(matrix):</span><br><span class="line">    max &#x3D; matrix[0]</span><br><span class="line">    min &#x3D; matrix[0]</span><br><span class="line">    for i in matrix:  #找到list中的最大元素和最小元素</span><br><span class="line">        if i &gt; max:</span><br><span class="line">            max &#x3D; i</span><br><span class="line">        if i &lt; min:</span><br><span class="line">            min &#x3D; i</span><br><span class="line"></span><br><span class="line">    tmp &#x3D; [0] * (max - min + 1) # 定义一个新的数组，长度为最大值减最小值加一</span><br><span class="line">    for i in range(len(matrix)):  #把原来数组中每个数字出现了多少次存在新数组中</span><br><span class="line">        tmp[matrix[i] - min] +&#x3D; 1</span><br><span class="line">    index &#x3D; 0</span><br><span class="line"></span><br><span class="line">    for j in range(len(tmp)):    # </span><br><span class="line">        while tmp[j] &gt; 0:</span><br><span class="line">            matrix[index] &#x3D; min + j</span><br><span class="line">            index +&#x3D; 1</span><br><span class="line">            tmp[j] -&#x3D; 1</span><br><span class="line">    return matrix</span><br></pre></td></tr></table></figure><p><strong>时间复杂度分析：</strong><br>第一个循环：O（n）<br>第二个循<br>环：O（n）<br>第三个循环：O（n），虽然有两个for但是实际上是从头到尾把元素都拿出来，只走了一遍所以时间复杂度还是O（n）<br>所以时间复杂度为O（n）<br><strong>稳定性：</strong><br>不稳定</p><h3 id="六、归并排序（Merge-Sort）"><a href="#六、归并排序（Merge-Sort）" class="headerlink" title="六、归并排序（Merge Sort）"></a>六、归并排序（Merge Sort）</h3><p><strong>原理：</strong><br>把数组从中间分成前后两个数组，再把前后两个数组每个数组再分，分到最小，然后对前后两部分分别排序，再将排好序的两部分合并在一起。</p><p><strong>图片说明：</strong><br><a href="https://sm.ms/image/RkuSIL2mG56sljg" target="_blank"><img src="https://i.loli.net/2020/05/13/RkuSIL2mG56sljg.png" ></a><br><strong>Python实现：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">def MergeSort(matrix):</span><br><span class="line">    matrix &#x3D; devide(matrix)</span><br><span class="line">    return matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def devide(matrix):</span><br><span class="line">    if len(matrix) &lt;&#x3D; 1:</span><br><span class="line">        return matrix</span><br><span class="line"></span><br><span class="line">    m &#x3D; len(matrix) &#x2F;&#x2F; 2</span><br><span class="line">    a &#x3D; devide(matrix[:m])</span><br><span class="line">    b &#x3D; devide(matrix[m:])</span><br><span class="line">    return merge(a, b)</span><br><span class="line"></span><br><span class="line">def merge(num1,num2):</span><br><span class="line">    num &#x3D; []</span><br><span class="line"></span><br><span class="line">    while len(num1) &gt; 0 and len(num2) &gt; 0:</span><br><span class="line">        if num1[0] &gt; num2[0]:</span><br><span class="line">            num.append(num2[0])</span><br><span class="line">            num2.remove(num2[0])</span><br><span class="line">        else:</span><br><span class="line">            num.append(num1[0])</span><br><span class="line">            num1.remove(num1[0])</span><br><span class="line">    if len(num1) &#x3D;&#x3D; 0:</span><br><span class="line">        num +&#x3D; num2</span><br><span class="line">    else:</span><br><span class="line">        num +&#x3D; num1</span><br><span class="line">    return num</span><br></pre></td></tr></table></figure><p><strong>时间复杂度：</strong><br>时间复杂度是 O(nlogn)，要优于 O(n^2)。<br><strong>空间复杂度：</strong><br>空间复杂度是 O(n)。<br><strong>稳定性：</strong><br>稳定</p><h3 id="七、快速排序（Quick-Sort）"><a href="#七、快速排序（Quick-Sort）" class="headerlink" title="七、快速排序（Quick Sort）"></a>七、快速排序（Quick Sort）</h3><p><strong>原理：</strong><br>数组的一个元素赋给下标赋给first，末尾下标赋给last，把数组从左到右第一个元素的值赋给pivot，从数组末尾往前找到第一个比pivot值小的数，赋给matrix[first]，再从first往后找到第一个比pivot大的值，当first与last相遇时，把pivot的值赋给matrix[first]或matrix[last]，然后递归。</p><p><strong>Python实现：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">def QuickSort(matrix, i, j):</span><br><span class="line">    if i &gt;&#x3D; j or i &lt; 0 or j &gt; len(matrix)-1:</span><br><span class="line">        return</span><br><span class="line">    else:</span><br><span class="line">        first &#x3D; i</span><br><span class="line">        last &#x3D; j</span><br><span class="line">        pivot &#x3D; matrix[i]</span><br><span class="line">        while first &lt; last:</span><br><span class="line">            while first &lt; last and matrix[last] &gt; pivot:</span><br><span class="line">                last -&#x3D; 1</span><br><span class="line"></span><br><span class="line">            matrix[i] &#x3D; matrix[last]</span><br><span class="line">            while first &lt; last and matrix[first] &lt; pivot:</span><br><span class="line">                first +&#x3D; 1</span><br><span class="line">            matrix[last] &#x3D; matrix[first]</span><br><span class="line"></span><br><span class="line">        matrix[first]&#x3D; pivot</span><br><span class="line"></span><br><span class="line">        QuickSort(matrix, i, first - 1)</span><br><span class="line">        QuickSort(matrix, first + 1, j)</span><br><span class="line">    return matrix</span><br></pre></td></tr></table></figure><p>快排参考链接：<br><a href="https://blog.csdn.net/u010005281/article/details/80084994" target="_blank" rel="noopener">https://blog.csdn.net/u010005281/article/details/80084994</a></p><p>文章参考：<br><a href="https://www.eet-china.com/mp/a11342.html" target="_blank" rel="noopener">硬核！C语言八大排序算法，附动图和详细代码解释！</a><br><a href="https://cloud.tencent.com/developer/article/1447538" target="_blank" rel="noopener">这或许是东半球分析十大排序算法最好的一篇文章</a><br><a href="https://www.cnblogs.com/onepixel/p/7674659.html" target="_blank" rel="noopener">十大经典排序算法（动图演示）</a><br><a href="http://blog.jialongfei.com/article/61" target="_blank" rel="noopener">数据结构与算法系列（五）基于选择的排序算法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
